XU = max(log10(bins))
XL = min(log10(bins))
#ggplot method
SFSplot <- ggplot(dat, aes(x = bins, y = props, group = labels, color = labels),
xlim = c(XL, XU), ylim = c(YL, YU))+
geom_line(size = 1.5)+
scale_y_continuous(name = "Proportion of private polymorphism")+
scale_x_log10(name = "Alternate allele frequency")+
scale_color_manual(values = c("forestgreen", "red", "darkblue", "magenta"))
return(SFSplot)
}
SFS.plot(AFR_AF_counts, AFR_AF_bins, EUR_AF_counts, EUR_AF_bins,
EAS_AF_counts, EAS_AF_bins, SAS_AF_counts, SAS_AF_bins, "GGA->A", 1)
setwd("C:/Users/VoightLab/Dropbox/SNP_rates/Data/singletons_excluded/")
setwd("C:/Users/VoightLab/Dropbox/SNP_rates/Raw_Data/singletons_excluded/")
AFR_7mer_counts <- read_delim("7mer/AFR_7mer_counts",
"\t", escape_double = FALSE, trim_ws = TRUE)
setwd("C:/Users/VoightLab/Dropbox/SNP_rates/Raw_Data/singletons_excluded/")
AFR_7mer_counts <- read_delim("7mer/AFR_7mer_counts.txt",
"\t", escape_double = FALSE, trim_ws = TRUE)
EUR_7mer_counts <- read_delim("7mer/EUR_7mer_counts",
"\t", escape_double = FALSE, trim_ws = TRUE)
AFR_5mer_counts <- read_delim("5mer/AFR_5mer_counts.txt",
"\t", escape_double = FALSE, trim_ws = TRUE)
EUR_5mer_counts <- read_delim("5mer/EUR_5mer_counts.txt",
"\t", escape_double = FALSE, trim_ws = TRUE)
EAS_5mer_counts <- read_delim("5mer/EAS_5mer_counts.txt",
"\t", escape_double = FALSE, trim_ws = TRUE)
SAS_5mer_counts <- read_delim("5mer/SAS_5mer_counts.txt",
"\t", escape_double = FALSE, trim_ws = TRUE)
gw_5mer_counts <- read_delim("C:/Users/VoightLab/Dropbox/SNP_rates/Data/gw_counts/gw_5mer_counts.txt",
"\t", escape_double = FALSE, trim_ws = TRUE)
gw_5mer_counts <- read_delim("C:/Users/VoightLab/Dropbox/SNP_rates/Raw_Data/gw_counts/gw_5mer_counts.txt",
"\t", escape_double = FALSE, trim_ws = TRUE)
setwd("C:/Users/VoightLab/Dropbox/SNP_rates/Raw_Data/singletons_excluded/")
AFR_7mer_counts <- read_delim("7mer/AFR_7mer_counts.txt",
"\t", escape_double = FALSE, trim_ws = TRUE)
EUR_7mer_counts <- read_delim("7mer/EUR_7mer_counts.txt",
"\t", escape_double = FALSE, trim_ws = TRUE)
EAS_7mer_counts <- read_delim("7mer/EAS_7mer_counts.txt",
"\t", escape_double = FALSE, trim_ws = TRUE)
SAS_7mer_counts <- read_delim("7mer/SAS_7mer_counts.txt",
"\t", escape_double = FALSE, trim_ws = TRUE)
gw_7mer_counts <- read_delim("C:/Users/VoightLab/Dropbox/SNP_rates/Data/gw_counts/gw_7mer_counts.txt",
"\t", escape_double = FALSE, trim_ws = TRUE)
setwd("C:/Users/VoightLab/Dropbox/SNP_rates/Raw_Data/singletons_excluded/")
AFR_7mer_counts <- read_delim("7mer/AFR_7mer_counts.txt",
"\t", escape_double = FALSE, trim_ws = TRUE)
EUR_7mer_counts <- read_delim("7mer/EUR_7mer_counts.txt",
"\t", escape_double = FALSE, trim_ws = TRUE)
EAS_7mer_counts <- read_delim("7mer/EAS_7mer_counts.txt",
"\t", escape_double = FALSE, trim_ws = TRUE)
SAS_7mer_counts <- read_delim("7mer/SAS_7mer_counts.txt",
"\t", escape_double = FALSE, trim_ws = TRUE)
AFR_5mer_counts <- read_delim("5mer/AFR_5mer_counts.txt",
"\t", escape_double = FALSE, trim_ws = TRUE)
EUR_5mer_counts <- read_delim("5mer/EUR_5mer_counts.txt",
"\t", escape_double = FALSE, trim_ws = TRUE)
EAS_5mer_counts <- read_delim("5mer/EAS_5mer_counts.txt",
"\t", escape_double = FALSE, trim_ws = TRUE)
SAS_5mer_counts <- read_delim("5mer/SAS_5mer_counts.txt",
"\t", escape_double = FALSE, trim_ws = TRUE)
AFR_3mer_counts <- read_delim("3mer/AFR_3mer_counts.txt",
"\t", escape_double = FALSE, trim_ws = TRUE)
EUR_3mer_counts <- read_delim("3mer/EUR_3mer_counts.txt",
"\t", escape_double = FALSE, trim_ws = TRUE)
EAS_3mer_counts <- read_delim("3mer/EAS_3mer_counts.txt",
"\t", escape_double = FALSE, trim_ws = TRUE)
SAS_3mer_counts <- read_delim("3mer/SAS_3mer_counts.txt",
"\t", escape_double = FALSE, trim_ws = TRUE)
setwd("C:/Users/VoightLab/Dropbox/SNP_rates/Raw_Data/gw_counts/")
gw_5mer_counts <- read_delim("gw_5mer_counts.txt",
"\t", escape_double = FALSE, trim_ws = TRUE)
gw_3mer_counts <- read_delim("gw_3mer_counts.txt",
"\t", escape_double = FALSE, trim_ws = TRUE)
gw_7mer_counts <- read_delim("gw_7mer_counts.txt",
"\t", escape_double = FALSE, trim_ws = TRUE)
setwd("C:/Users/VoightLab/Dropbox/SNP_rates/Raw_Data/singletons_excluded/")
AFR_7mer_counts <- read_delim("7mer/AFR_7mer_counts.txt",
"\t", escape_double = FALSE, trim_ws = TRUE)
EUR_7mer_counts <- read_delim("7mer/EUR_7mer_counts.txt",
"\t", escape_double = FALSE, trim_ws = TRUE)
EAS_7mer_counts <- read_delim("7mer/EAS_7mer_counts.txt",
"\t", escape_double = FALSE, trim_ws = TRUE)
SAS_7mer_counts <- read_delim("7mer/SAS_7mer_counts.txt",
"\t", escape_double = FALSE, trim_ws = TRUE)
AFR_5mer_counts <- read_delim("5mer/AFR_5mer_counts.txt",
"\t", escape_double = FALSE, trim_ws = TRUE)
EUR_5mer_counts <- read_delim("5mer/EUR_5mer_counts.txt",
"\t", escape_double = FALSE, trim_ws = TRUE)
EAS_5mer_counts <- read_delim("5mer/EAS_5mer_counts.txt",
"\t", escape_double = FALSE, trim_ws = TRUE)
SAS_5mer_counts <- read_delim("5mer/SAS_5mer_counts.txt",
"\t", escape_double = FALSE, trim_ws = TRUE)
AFR_3mer_counts <- read_delim("3mer/AFR_3mer_counts.txt",
"\t", escape_double = FALSE, trim_ws = TRUE)
EUR_3mer_counts <- read_delim("3mer/EUR_3mer_counts.txt",
"\t", escape_double = FALSE, trim_ws = TRUE)
EAS_3mer_counts <- read_delim("3mer/EAS_3mer_counts.txt",
"\t", escape_double = FALSE, trim_ws = TRUE)
SAS_3mer_counts <- read_delim("3mer/SAS_3mer_counts.txt",
"\t", escape_double = FALSE, trim_ws = TRUE)
setwd("C:/Users/VoightLab/Dropbox/SNP_rates/Raw_Data/gw_counts/")
gw_5mer_counts <- read_delim("gw_5mer_counts.txt",
"\t", escape_double = FALSE, trim_ws = TRUE)
gw_3mer_counts <- read_delim("gw_3mer_counts.txt",
"\t", escape_double = FALSE, trim_ws = TRUE)
gw_7mer_counts <- read_delim("gw_7mer_counts.txt",
"\t", escape_double = FALSE, trim_ws = TRUE)
library(readr)
library(ggplot2)
setwd("C:/Users/VoightLab/Dropbox/SNP_rates/Analyses/chi_squared_tests/results/ordered_p")
sig.3mers <- read_delim("o_significant_3mers.txt",
delim ="\t", escape_double = F, trim_ws = T)
sig.5mers <- read_delim("o_significant_5mers.txt",
delim ="\t", escape_double = F, trim_ws = T)
setwd("C:/Users/VoightLab/Dropbox/SNP_rates/Analyses/chi_squared_tests/results/ordered_p")
sig.3mers <- read_delim("o_significant_3mers.txt",
delim ="\t", escape_double = F, trim_ws = T)
sig.5mers <- read_delim("o_significant_new_5mers.txt",
delim ="\t", escape_double = F, trim_ws = T)
sig.7mers <- read_delim("o_significant_new_5mers.txt",
delim ="\t", escape_double = F, trim_ws = T)
library(readr)
library(knitr)
library(ggplot2)
library(dplyr)
require(reshape2)
kable(head(sig.3mers, n = 10), row.names = F, caption = "10 most highly significant 3mers")
kable(head(sig.3mers, n = 10), row.names = F, digits = 600
caption = "10 most highly significant 3mers")
kable(head(sig.3mers, n = 10), row.names = F, digits = 600,
caption = "10 most highly significant 3mers")
library(gridExtra)
install.packages(gridExtra)
install.packages("gridExtra")
install.packages("grid")
install.packages("grid")
library(gridExtra)
library(grid)
is.element("GAC->T", sig.3mers$Context)
which(sig.3mers$Context == "GAC->T")
a <- CI.plot(AFR_3mer_counts, EUR_3mer_counts, EAS_3mer_counts, SAS_3mer_counts, "ATC->A")
CI.plot <- function(AFR, EUR, EAS, SAS, mut) {
mut.i <- which(AFR$Context == mut)
popnames <- c("European", "South\nAsian", "African", "East\nAsian")
colors <- c("darkblue", "magenta", "forestgreen", "red")
#have to do a silly workaround or R will sort popnames alphanumerically
poplabs <- factor(popnames, levels= popnames)
#cycle through pops and get counts for mut
counts <- rep(0, 4)
sums <- rep(0, 4)
pops <- list(EUR, SAS, AFR, EAS)
for (i in 1:length(pops)){
counts[i] <- pops[[i]]$Count[mut.i]
sums[i]<- sum(pops[[i]]$Count)
}
#estimate substitution probability
N.c <- AFR$context_in_genome[mut.i]
theta <- counts/N.c
L <- theta - 1.96*sqrt(theta*(1-theta)/N.c)
U <- theta + 1.96*sqrt(theta*(1-theta)/N.c)
#normalize to rate estimate; assume genome wide subsitution probability is measured without error
norm <- 1.2E-8*(sum(as.numeric(AFR$context_in_genome))/3)/sums
df <- data.frame(cbind(popnames, theta*norm, L*norm, U*norm))
plotcol <- reorder(colors, theta*norm)
CI.plot <- ggplot(df, aes(reorder(popnames, c(1,2,3,4)), theta*norm)) +
geom_point(size = 4, color = plotcol) +
geom_errorbar(aes(ymax = U*norm, ymin = L*norm), color = plotcol, size =1)+
labs(y = paste("Estimated mutation rate of ", mut,"\n")) + #y axis label
theme(axis.text.x = element_text(size = rel(1.4)), axis.title.x = element_blank(), #adjust text sizes
axis.title.y = element_text(size = rel(1.5)), axis.text.y = element_text(size = rel(1.4)),
legend.position = 'none')
return(CI.plot)
}
#box plot of rate by chrom for a particular sequence context
chrom.box <- function(AFR, EUR, EAS, SAS, gw, mut){
#get data
chrom.dat <- chrom.process.data(AFR, EUR, EAS, SAS, gw, mut)
#find outliers; THIS DOESN'T WORK :(
AFR.rates <- subset(chrom.dat, chrom.dat$pop == "African")
AFR.outliers <- subset(AFR.rates, is_outlier(AFR.rates$rate)==TRUE)
EUR.rates <- subset(chrom.dat, chrom.dat$pop == "European")
EUR.outliers <- subset(EUR.rates, is_outlier(EUR.rates$rate)==TRUE)
EAS.rates <- subset(chrom.dat, chrom.dat$pop == "East\nAsian")
EAS.outliers <- subset(EAS.rates, is_outlier(EAS.rates$rate)==TRUE)
SAS.rates <- subset(chrom.dat, chrom.dat$pop == "South\nAsian")
SAS.outliers <- subset(SAS.rates, is_outlier(SAS.rates$rate)==TRUE)
#plot
c_plot <- ggplot(chrom.dat, aes(pop, rate))+
geom_boxplot(outlier.color = NA, fill = c("palegreen1", "lightcoral", "steelblue1", 'plum1'))+
labs(x = "\nPopulation", y = paste("Mutation rate of", mut,"by chromosome\n"))+
scale_color_manual("", values = c("forest green","red", "dark blue", 'magenta'))+
#add outlier labels
geom_text(data = EUR.outliers, aes(pop, rate, label = chrom), color = "dark blue", nudge_x = 0.1)+
geom_text(data = AFR.outliers, aes(pop, rate, label = chrom), color = "forest green", nudge_x = 0.1)+
geom_text(data = EAS.outliers, aes(pop, rate, label = chrom), color = "red", nudge_x = 0.1)+
geom_text(data = SAS.outliers, aes(pop, rate, label = chrom), color = "magenta", nudge_x = 0.1)+
#add points
geom_point(aes(color = factor(chrom.dat$pop)), size = 2, position = position_jitter(width = 0.1))+
theme(axis.text.x = element_text(size = rel(1.4)), axis.title.x = element_blank(), #adjust text sizes
axis.title.y = element_text(size = rel(1.5)), axis.text.y = element_text(size = rel(1.4)),
legend.position = 'none')#legend position
return(c_plot)
}
#helper function for ploting which formats the data for ggplot
chrom.process.data <- function(AFR, EUR, EAS, SAS, gw, mut){
#get indicies for mutation and contextAFR, EUR, EAS, SAS, gw, mut
i <- which(EUR$Context == mut)
cntxt <- substr(mut, 1, nchar(mut)-3)
i.cntxt <- which(gw$Context == cntxt)
col.e <- ncol(AFR)
col.s <- col.e-22
#trim summary columns from each input dataframe
AFR <- AFR[c(col.s: col.e)]
EUR <- EUR[c(col.s: col.e)]
EAS <- EAS[c(col.s: col.e)]
SAS <- SAS[c(col.s: col.e)]
gw <- gw[-c(1,2)]
gw_totals <- colSums(gw)
#make output dataframe for plot
dat <- data.frame(matrix(nrow = 23, ncol = 4))
colnames(dat) <- c("African", "East\nAsian", "European", "South\nAsian")
#get rates for each pop
dat$'European' <- t(EUR[i,]/gw[i.cntxt,]*1.2E-8*gw_totals/colSums(EUR))
dat$'African' <- t(AFR[i,]/gw[i.cntxt,]*1.2E-8*gw_totals/colSums(AFR))
dat$'East\nAsian' <- t(EAS[i,]/gw[i.cntxt,]*1.2E-8*gw_totals/colSums(EAS))
dat$'South\nAsian' <- t(SAS[i,]/gw[i.cntxt,]*1.2E-8*gw_totals/colSums(SAS))
#melt data to necessary format
row.names(dat) <- c('1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '21', '22', 'X')
dat.m <- melt(t(dat))
colnames(dat.m) <- c("pop", "chrom", "rate")
return(dat.m)
}
#helper function that returns which elements of a vector x are outliers
is_outlier <- function(x) {
return(x < quantile(x, 0.25) - 1.5 * IQR(x) | x > quantile(x, 0.75) + 1.5 * IQR(x))
}
a <- CI.plot(AFR_3mer_counts, EUR_3mer_counts, EAS_3mer_counts, SAS_3mer_counts, "ATC->A")
library(readr)
library(knitr)
library(ggplot2)
library(dplyr)
require(reshape2)
library(gridExtra)
library(grid)
a <- CI.plot(AFR_3mer_counts, EUR_3mer_counts, EAS_3mer_counts, SAS_3mer_counts, "ATC->A")
a
CI.plot <- function(AFR, EUR, EAS, SAS, mut) {
mut.i <- which(AFR$Context == mut)
popnames <- c("African","European", "South\nAsian", "East\nAsian")
colors <- c("forestgreen", "darkblue", "magenta","red")
#have to do a silly workaround or R will sort popnames alphanumerically
poplabs <- factor(popnames, levels= popnames)
#cycle through pops and get counts for mut
counts <- rep(0, 4)
sums <- rep(0, 4)
pops <- list(EUR, SAS, AFR, EAS)
for (i in 1:length(pops)){
counts[i] <- pops[[i]]$Count[mut.i]
sums[i]<- sum(pops[[i]]$Count)
}
#estimate substitution probability
N.c <- AFR$context_in_genome[mut.i]
theta <- counts/N.c
L <- theta - 1.96*sqrt(theta*(1-theta)/N.c)
U <- theta + 1.96*sqrt(theta*(1-theta)/N.c)
#normalize to rate estimate; assume genome wide subsitution probability is measured without error
norm <- 1.2E-8*(sum(as.numeric(AFR$context_in_genome))/3)/sums
df <- data.frame(cbind(popnames, theta*norm, L*norm, U*norm))
plotcol <- reorder(colors, theta*norm)
CI.plot <- ggplot(df, aes(reorder(popnames, c(1,2,3,4)), theta*norm)) +
geom_point(size = 4, color = plotcol) +
geom_errorbar(aes(ymax = U*norm, ymin = L*norm), color = plotcol, size =1)+
labs(y = paste("Estimated mutation rate of ", mut,"\n")) + #y axis label
theme(axis.text.x = element_text(size = rel(1.4)), axis.title.x = element_blank(), #adjust text sizes
axis.title.y = element_text(size = rel(1.5)), axis.text.y = element_text(size = rel(1.4)),
legend.position = 'none')
return(CI.plot)
}
a <- CI.plot(AFR_3mer_counts, EUR_3mer_counts, EAS_3mer_counts, SAS_3mer_counts, "ATC->A")
a
CI.plot <- function(AFR, EUR, EAS, SAS, mut) {
mut.i <- which(AFR$Context == mut)
popnames <- c("African","European", "South\nAsian", "East\nAsian")
colors <- c("forestgreen", "darkblue", "magenta","red")
#have to do a silly workaround or R will sort popnames alphanumerically
poplabs <- factor(popnames, levels= popnames)
#cycle through pops and get counts for mut
counts <- rep(0, 4)
sums <- rep(0, 4)
pops <- list(AFR, EUR, SAS, EAS)
for (i in 1:length(pops)){
counts[i] <- pops[[i]]$Count[mut.i]
sums[i]<- sum(pops[[i]]$Count)
}
#estimate substitution probability
N.c <- AFR$context_in_genome[mut.i]
theta <- counts/N.c
L <- theta - 1.96*sqrt(theta*(1-theta)/N.c)
U <- theta + 1.96*sqrt(theta*(1-theta)/N.c)
#normalize to rate estimate; assume genome wide subsitution probability is measured without error
norm <- 1.2E-8*(sum(as.numeric(AFR$context_in_genome))/3)/sums
df <- data.frame(cbind(popnames, theta*norm, L*norm, U*norm))
plotcol <- reorder(colors, theta*norm)
CI.plot <- ggplot(df, aes(reorder(popnames, c(1,2,3,4)), theta*norm)) +
geom_point(size = 4, color = plotcol) +
geom_errorbar(aes(ymax = U*norm, ymin = L*norm), color = plotcol, size =1)+
labs(y = paste("Estimated mutation rate of ", mut,"\n")) + #y axis label
theme(axis.text.x = element_text(size = rel(1.4)), axis.title.x = element_blank(), #adjust text sizes
axis.title.y = element_text(size = rel(1.5)), axis.text.y = element_text(size = rel(1.4)),
legend.position = 'none')
return(CI.plot)
}
a <- CI.plot(AFR_3mer_counts, EUR_3mer_counts, EAS_3mer_counts, SAS_3mer_counts, "ATC->A")
a
a <- CI.plot(AFR_3mer_counts, EUR_3mer_counts, EAS_3mer_counts, SAS_3mer_counts, "ATC->A")
b <- CI.plot(AFR_3mer_counts, EUR_3mer_counts, EAS_3mer_counts, SAS_3mer_counts, "ACC->A")
c <- CI.plot(AFR_3mer_counts, EUR_3mer_counts, EAS_3mer_counts, SAS_3mer_counts, "GAC->T")
grid.arrange(a,b,c, ncol = 3)
d <- CI.plot(AFR_3mer_counts, EUR_3mer_counts, EAS_3mer_counts, SAS_3mer_counts, "CCC->G")
grid.arrange(a,b,c, d ncol = 4)
grid.arrange(a,b,c, d, ncol = 4)
d <- chrom.box(AFR_3mer_counts, EUR_3mer_counts, EAS_3mer_counts, SAS_3mer_counts,
gw_3mer_counts,"ATC->A")
d
d <- chrom.scatter(AFR_3mer_counts, EUR_3mer_counts, EAS_3mer_counts, SAS_3mer_counts,
chrom.scatter <- function(AFR, EUR, EAS, SAS, gw, mut){
#get data
chrom.dat <- chrom.process.data(AFR, EUR, EAS, SAS, gw, mut)
#plot
c_plot <- ggplot(chrom.dat, aes(chrom, rate))+
labs(x = "\nChromosome", y = paste("Estimated mutation rate of", mut,"\n"))+
scale_color_manual("", values = c("forest green", "dark blue", "red", 'magenta'))+
geom_point(aes(color = factor(chrom.dat$pop)), size = 3)+
theme(axis.text.x = element_text(size = rel(1.5)), axis.title.x = element_text(size = rel(1.9)), #adjust text sizes
axis.title.y = element_text(size = rel(1.9)), axis.text.y = element_text(size = rel(1.7)),
legend.text = element_text(size = rel(1.7)))#legend position
return(c_plot)
}
d <- chrom.scatter(AFR_3mer_counts, EUR_3mer_counts, EAS_3mer_counts, SAS_3mer_counts, gw_3mer_counts, "ATC->A")
d
chrom.scatter(AFR_3mer_counts, EUR_3mer_counts, EAS_3mer_counts, SAS_3mer_counts, gw_3mer_counts, "ACC->A")
chrom.scatter(AFR_3mer_counts, EUR_3mer_counts, EAS_3mer_counts, SAS_3mer_counts, gw_3mer_counts, "GAC->T")
chrom.scatter <- function(AFR, EUR, EAS, SAS, gw, mut){
#get data
chrom.dat <- chrom.process.data(AFR, EUR, EAS, SAS, gw, mut)
#plot
c_plot <- ggplot(chrom.dat, aes(chrom, rate))+
labs(x = "\nChromosome", y = paste("Estimated mutation rate of", mut,"\n"))+
scale_color_manual("", values = c("forest green", "red", "dark blue", 'magenta'))+
geom_point(aes(color = factor(chrom.dat$pop)), size = 3)+
theme(axis.text.x = element_text(size = rel(1.5)), axis.title.x = element_text(size = rel(1.9)), #adjust text sizes
axis.title.y = element_text(size = rel(1.9)), axis.text.y = element_text(size = rel(1.7)),
legend.text = element_text(size = rel(1.7)))#legend position
return(c_plot)
}
chrom.scatter(AFR_3mer_counts, EUR_3mer_counts, EAS_3mer_counts, SAS_3mer_counts, gw_3mer_counts, "ACC->A")
chrom.scatter(AFR_3mer_counts, EUR_3mer_counts, EAS_3mer_counts, SAS_3mer_counts, gw_3mer_counts, "CCC->G")
grid.arrange(a,b,c, ncol = 2)
CI.plot <- function(AFR, EUR, EAS, SAS, mut) {
mut.i <- which(AFR$Context == mut)
popnames <- c("African","European", "South\nAsian", "East\nAsian")
colors <- c("forestgreen", "darkblue", "magenta","red")
#have to do a silly workaround or R will sort popnames alphanumerically
poplabs <- factor(popnames, levels= popnames)
#cycle through pops and get counts for mut
counts <- rep(0, 4)
sums <- rep(0, 4)
pops <- list(AFR, EUR, SAS, EAS)
for (i in 1:length(pops)){
counts[i] <- pops[[i]]$Count[mut.i]
sums[i]<- sum(pops[[i]]$Count)
}
#estimate substitution probability
N.c <- AFR$context_in_genome[mut.i]
theta <- counts/N.c
L <- theta - 1.96*sqrt(theta*(1-theta)/N.c)
U <- theta + 1.96*sqrt(theta*(1-theta)/N.c)
#normalize to rate estimate; assume genome wide subsitution probability is measured without error
norm <- 1.2E-8*(sum(as.numeric(AFR$context_in_genome))/3)/sums
df <- data.frame(cbind(popnames, theta*norm, L*norm, U*norm))
plotcol <- reorder(colors, theta*norm)
CI.plot <- ggplot(df, aes(reorder(popnames, c(1,2,3,4)), theta*norm)) +
geom_point(size = 4, color = plotcol) +
geom_errorbar(aes(ymax = U*norm, ymin = L*norm), color = plotcol, size =1)+
labs(y = paste("Estimated mutation rate of ", mut,"\n")) + #y axis label
theme(axis.text.x = element_text(size = rel(1)), axis.title.x = element_blank(), #adjust text sizes
axis.title.y = element_text(size = rel(1)), axis.text.y = element_text(size = rel(.5)),
legend.position = 'none')
return(CI.plot)
}
a <- CI.plot(AFR_3mer_counts, EUR_3mer_counts, EAS_3mer_counts, SAS_3mer_counts, "ATC->A")
b <- CI.plot(AFR_3mer_counts, EUR_3mer_counts, EAS_3mer_counts, SAS_3mer_counts, "ACC->A")
c <- CI.plot(AFR_3mer_counts, EUR_3mer_counts, EAS_3mer_counts, SAS_3mer_counts, "GAC->T")
grid.arrange(a,b,c, ncol = 3)
grid.arrange(a,b,c, ncol = 3)
CI.plot <- function(AFR, EUR, EAS, SAS, mut) {
mut.i <- which(AFR$Context == mut)
popnames <- c("African","European", "South\nAsian", "East\nAsian")
colors <- c("forestgreen", "darkblue", "magenta","red")
#have to do a silly workaround or R will sort popnames alphanumerically
poplabs <- factor(popnames, levels= popnames)
#cycle through pops and get counts for mut
counts <- rep(0, 4)
sums <- rep(0, 4)
pops <- list(AFR, EUR, SAS, EAS)
for (i in 1:length(pops)){
counts[i] <- pops[[i]]$Count[mut.i]
sums[i]<- sum(pops[[i]]$Count)
}
#estimate substitution probability
N.c <- AFR$context_in_genome[mut.i]
theta <- counts/N.c
L <- theta - 1.96*sqrt(theta*(1-theta)/N.c)
U <- theta + 1.96*sqrt(theta*(1-theta)/N.c)
#normalize to rate estimate; assume genome wide subsitution probability is measured without error
norm <- 1.2E-8*(sum(as.numeric(AFR$context_in_genome))/3)/sums
df <- data.frame(cbind(popnames, theta*norm, L*norm, U*norm))
plotcol <- reorder(colors, theta*norm)
CI.plot <- ggplot(df, aes(reorder(popnames, c(1,2,3,4)), theta*norm)) +
geom_point(size = 4, color = plotcol) +
geom_errorbar(aes(ymax = U*norm, ymin = L*norm), color = plotcol, size =1)+
labs(y = paste("Estimated mutation rate of ", mut,"\n")) + #y axis label
theme(axis.text.x = element_text(size = rel(1.3), angle = 90, hjust = 0), axis.title.x = element_blank(), #adjust text sizes
axis.title.y = element_text(size = rel(1)), axis.text.y = element_text(size = rel(.5)),
legend.position = 'none')
return(CI.plot)
}
a <- CI.plot(AFR_3mer_counts, EUR_3mer_counts, EAS_3mer_counts, SAS_3mer_counts, "ATC->A")
b <- CI.plot(AFR_3mer_counts, EUR_3mer_counts, EAS_3mer_counts, SAS_3mer_counts, "ACC->A")
c <- CI.plot(AFR_3mer_counts, EUR_3mer_counts, EAS_3mer_counts, SAS_3mer_counts, "GAC->T")
grid.arrange(a,b,c, ncol = 3)
CI.plot <- function(AFR, EUR, EAS, SAS, mut) {
mut.i <- which(AFR$Context == mut)
popnames <- c("African","European", "South\nAsian", "East\nAsian")
colors <- c("forestgreen", "darkblue", "magenta","red")
#have to do a silly workaround or R will sort popnames alphanumerically
poplabs <- factor(popnames, levels= popnames)
#cycle through pops and get counts for mut
counts <- rep(0, 4)
sums <- rep(0, 4)
pops <- list(AFR, EUR, SAS, EAS)
for (i in 1:length(pops)){
counts[i] <- pops[[i]]$Count[mut.i]
sums[i]<- sum(pops[[i]]$Count)
}
#estimate substitution probability
N.c <- AFR$context_in_genome[mut.i]
theta <- counts/N.c
L <- theta - 1.96*sqrt(theta*(1-theta)/N.c)
U <- theta + 1.96*sqrt(theta*(1-theta)/N.c)
#normalize to rate estimate; assume genome wide subsitution probability is measured without error
norm <- 1.2E-8*(sum(as.numeric(AFR$context_in_genome))/3)/sums
df <- data.frame(cbind(popnames, theta*norm, L*norm, U*norm))
plotcol <- reorder(colors, theta*norm)
CI.plot <- ggplot(df, aes(reorder(popnames, c(1,2,3,4)), theta*norm)) +
geom_point(size = 4, color = plotcol) +
geom_errorbar(aes(ymax = U*norm, ymin = L*norm), color = plotcol, size =1)+
labs(y = paste("Estimated mutation rate of ", mut,"\n")) + #y axis label
theme(axis.text.x = element_text(size = rel(.9)), axis.title.x = element_blank(), #adjust text sizes
axis.title.y = element_text(size = rel(1.2)), axis.text.y = element_text(size = rel(.5), angle = 90, hjust = 0),
legend.position = 'none')
return(CI.plot)
}
a <- CI.plot(AFR_3mer_counts, EUR_3mer_counts, EAS_3mer_counts, SAS_3mer_counts, "ATC->A")
b <- CI.plot(AFR_3mer_counts, EUR_3mer_counts, EAS_3mer_counts, SAS_3mer_counts, "ACC->A")
c <- CI.plot(AFR_3mer_counts, EUR_3mer_counts, EAS_3mer_counts, SAS_3mer_counts, "GAC->T")
grid.arrange(a,b,c, ncol = 3)
CI.plot <- function(AFR, EUR, EAS, SAS, mut) {
mut.i <- which(AFR$Context == mut)
popnames <- c("African","European", "South\nAsian", "East\nAsian")
colors <- c("forestgreen", "darkblue", "magenta","red")
#have to do a silly workaround or R will sort popnames alphanumerically
poplabs <- factor(popnames, levels= popnames)
#cycle through pops and get counts for mut
counts <- rep(0, 4)
sums <- rep(0, 4)
pops <- list(AFR, EUR, SAS, EAS)
for (i in 1:length(pops)){
counts[i] <- pops[[i]]$Count[mut.i]
sums[i]<- sum(pops[[i]]$Count)
}
#estimate substitution probability
N.c <- AFR$context_in_genome[mut.i]
theta <- counts/N.c
L <- theta - 1.96*sqrt(theta*(1-theta)/N.c)
U <- theta + 1.96*sqrt(theta*(1-theta)/N.c)
#normalize to rate estimate; assume genome wide subsitution probability is measured without error
norm <- 1.2E-8*(sum(as.numeric(AFR$context_in_genome))/3)/sums
df <- data.frame(cbind(popnames, theta*norm, L*norm, U*norm))
plotcol <- reorder(colors, theta*norm)
CI.plot <- ggplot(df, aes(reorder(popnames, c(1,2,3,4)), theta*norm)) +
geom_point(size = 4, color = plotcol) +
geom_errorbar(aes(ymax = U*norm, ymin = L*norm), color = plotcol, size =1)+
labs(y = paste("Estimated mutation rate of ", mut,"\n")) + #y axis label
theme(axis.text.x = element_text(size = rel(.9)), axis.title.x = element_blank(), #adjust text sizes
axis.title.y = element_text(size = rel(1)), axis.text.y = element_text(size = rel(.9), angle = 90, hjust = 0.5),
legend.position = 'none')
return(CI.plot)
}
a <- CI.plot(AFR_3mer_counts, EUR_3mer_counts, EAS_3mer_counts, SAS_3mer_counts, "ATC->A")
b <- CI.plot(AFR_3mer_counts, EUR_3mer_counts, EAS_3mer_counts, SAS_3mer_counts, "ACC->A")
c <- CI.plot(AFR_3mer_counts, EUR_3mer_counts, EAS_3mer_counts, SAS_3mer_counts, "GAC->T")
grid.arrange(a,b,c, ncol = 3)
d <- chrom.box(AFR_3mer_counts, EUR_3mer_counts, EAS_3mer_counts, SAS_3mer_counts,
gw_3mer_counts,"ATC->A")
e <- chrom.box(AFR_3mer_counts, EUR_3mer_counts, EAS_3mer_counts, SAS_3mer_counts,
gw_3mer_counts,"ACC->A")
f <- chrom.box(AFR_3mer_counts, EUR_3mer_counts, EAS_3mer_counts, SAS_3mer_counts,
gw_3mer_counts,"GAC->T")
grid.arrange(d,e,f, ncol = 3)
