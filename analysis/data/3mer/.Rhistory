if (logunits == T) {
data <- log2(data)
}
dr <- hclust(dist(data))
dc <- hclust(dist(t(data)))
heatmap.2(data, Rowv = as.dendrogram(dr), Colv = as.dendrogram(dc),
trace = 'none', col=colorRampPalette(c('blue', "white", 'red'))(n = 1000),
density.info = 'none', key.xlab = "fold differece vs. mean\n(log base 2 scale)",
key.title = NA, keysize = 0.5,
lhei = c(1,4.5), lwid = c(1,4),
reorderfun=function(d, w) reorder(d, w, agglo.FUN = min))
return(dr)
}
# makes a heatmap of all kmers with a certain set of 3mer or 5mer subcontexts
subcontext.heatmap <- function(rates, muts, labels, logunits = T){
if (nchar(muts[1]) == 6){
data <- get.3mer.subcontext.data(rates, muts, labels)
} else data <- get.5mer.subcontext.data(rates, muts, labels)
return(make.heatmap(data, logunits))
}
dr.3.all <- make.heatmap(norm.3mer.rates)
# makes a heatmap of a matrix and returns the row dendrogram as an object
make.heatmap <- function(data, logunits = T){
complete <- apply(data, 1, function(row) all(row != 0) & all(!is.na(row)))
data <- data[complete,]
if (logunits == T) {
data <- log2(data)
}
dr <- hclust(dist(data))
dc <- hclust(dist(t(data)))
heatmap.2(data, Rowv = as.dendrogram(dr), Colv = as.dendrogram(dc),
trace = 'none', col=colorRampPalette(c('blue', "white", 'red'))(n = 1000),
density.info = 'none', key.xlab = "fold differece vs. mean\n(log base 2 scale)",
key.title = NA, keysize = 0.5,
reorderfun=function(d, w) reorder(d, w, agglo.FUN = min))
return(dr)
}
# makes a heatmap of all kmers with a certain set of 3mer or 5mer subcontexts
subcontext.heatmap <- function(rates, muts, labels, logunits = T){
if (nchar(muts[1]) == 6){
data <- get.3mer.subcontext.data(rates, muts, labels)
} else data <- get.5mer.subcontext.data(rates, muts, labels)
return(make.heatmap(data, logunits))
}
dr.3.all <- make.heatmap(norm.3mer.rates)
# makes a heatmap of a matrix and returns the row dendrogram as an object
make.heatmap <- function(data, logunits = T){
complete <- apply(data, 1, function(row) all(row != 0) & all(!is.na(row)))
data <- data[complete,]
if (logunits == T) {
data <- log2(data)
}
dr <- hclust(dist(data))
dc <- hclust(dist(t(data)))
heatmap.2(data, Rowv = as.dendrogram(dr), Colv = as.dendrogram(dc),
trace = 'none', col=colorRampPalette(c('blue', "white", 'red'))(n = 1000),
density.info = 'none', key.xlab = "fold diff. vs. mean\n(log base 2 scale)",
key.title = NA, keysize = 1,
reorderfun=function(d, w) reorder(d, w, agglo.FUN = min))
return(dr)
}
# makes a heatmap of all kmers with a certain set of 3mer or 5mer subcontexts
subcontext.heatmap <- function(rates, muts, labels, logunits = T){
if (nchar(muts[1]) == 6){
data <- get.3mer.subcontext.data(rates, muts, labels)
} else data <- get.5mer.subcontext.data(rates, muts, labels)
return(make.heatmap(data, logunits))
}
dr.3.all <- make.heatmap(norm.3mer.rates)
get.5mer.subcontext.data <- function(rates, muts, labels){
# take subset with 5mer subcontexts in muts
data <- subset(rates, is.element(labels$X5mer, muts))
complete <- apply(data, 1, function(row) all(row != 0) & all(!is.na(row)))
data <- data[complete,]
return(data)
}
get.3mer.subcontext.data <- function(rates, muts, labels){
# take subset with 3mer subcontexts in muts
data <- subset(rates, is.element(labels$X3mer, muts))
complete <- apply(data, 1, function(row) all(row != 0) & all(!is.na(row)))
data <- data[complete,]
return(data)
}
dr.3.all <- make.heatmap(norm.3mer.rates)
# plot "TCC->T" type 5mers
dr.5.GGA <- subcontext.heatmap(norm.5mer.rates, c("TCC->T"), labels.5mer)
# makes a heatmap of a matrix and returns the row dendrogram as an object
make.heatmap <- function(data, logunits = T){
complete <- apply(data, 1, function(row) all(row != 0) & all(!is.na(row)))
data <- data[complete,]
if (logunits == T) {
data <- log2(data)
}
dr <- hclust(dist(data))
dc <- hclust(dist(t(data)))
heatmap.2(data, Rowv = as.dendrogram(dr), Colv = as.dendrogram(dc),
trace = 'none', col=colorRampPalette(c('blue', "white", 'red'))(n = 1000),
density.info = 'none', key.xlab = "",
key.title = NA, keysize = 1,
reorderfun=function(d, w) reorder(d, w, agglo.FUN = min))
return(dr)
}
# makes a heatmap of all kmers with a certain set of 3mer or 5mer subcontexts
subcontext.heatmap <- function(rates, muts, labels, logunits = T){
if (nchar(muts[1]) == 6){
data <- get.3mer.subcontext.data(rates, muts, labels)
} else data <- get.5mer.subcontext.data(rates, muts, labels)
return(make.heatmap(data, logunits))
}
dr.3.all <- make.heatmap(norm.3mer.rates)
# makes a heatmap of a matrix and returns the row dendrogram as an object
make.heatmap <- function(data, logunits = T){
complete <- apply(data, 1, function(row) all(row != 0) & all(!is.na(row)))
data <- data[complete,]
if (logunits == T) {
data <- log2(data)
}
dr <- hclust(dist(data))
dc <- hclust(dist(t(data)))
heatmap.2(data, Rowv = as.dendrogram(dr), Colv = as.dendrogram(dc),
trace = 'none', col=colorRampPalette(c('blue', "white", 'red'))(n = 1000),
density.info = 'none', key.xlab = "",
key.title = NA,
reorderfun=function(d, w) reorder(d, w, agglo.FUN = min))
return(dr)
}
# makes a heatmap of all kmers with a certain set of 3mer or 5mer subcontexts
subcontext.heatmap <- function(rates, muts, labels, logunits = T){
if (nchar(muts[1]) == 6){
data <- get.3mer.subcontext.data(rates, muts, labels)
} else data <- get.5mer.subcontext.data(rates, muts, labels)
return(make.heatmap(data, logunits))
}
dr.3.all <- make.heatmap(norm.3mer.rates)
rates.3mer <- as.matrix(read.delim("singletons_excluded/rate_profiles/rates_3mer.txt"))
norm.3mer.rates <- norm.byrow(rates.3mer, "fdiff")
dr.3.all <- make.heatmap(norm.3mer.rates)
# makes a heatmap of a matrix and returns the row dendrogram as an object
# this function is rewritten for making figure 1 of my paper. Won't work for most other applications.
make.heatmap <- function(data, logunits = T){
complete <- apply(data, 1, function(row) all(row != 0) & all(!is.na(row)))
data <- data[complete,]
if (logunits == T) {
data <- log2(data)
}
dr <- hclust(dist(data))
dc <- hclust(dist(t(data)))
weights.dr <- ifelse(rownames(data) == "TCC->T", yes = 10, no = 0) + ifelse(rownames(data) == "GAT->T", yes = 9, no = 0) +
ifelse(rownames(data) == "ACG->T", yes = 8, no = 0) + ifelse(rownames(data) == "AAC->C", yes = 7, no = 0)
dr.ordered <- reorder(as.dendrogram(dr), wts = weights.dr, agglo.FUN = mean)
heatmap.2(data, Rowv = dr.ordered, Colv = as.dendrogram(dc),
trace = 'none', col=colorRampPalette(c('blue', "white", 'red'))(n = 1000),
density.info = 'none', key.xlab = "fold differece vs. mean\n(log base 2 scale)",
key.title = NA, keysize = 0.5, key.par = list(cex=0.65),
lhei = c(1,5.5), lwid = c(1,4))
return(dr)
}
dr.3.all <- make.heatmap(norm.3mer.rates)
dr.3.all <- make.heatmap(norm.3mer.rates)
make.heatmap(norm.3mer.rates)
# load data
rates.3mer <- as.matrix(read.delim("singletons_excluded/rate_profiles/rates_3mer.txt"))
rates.5mer <- as.matrix(read.delim("singletons_excluded/rate_profiles/rates_5mer.txt"))
rates.7mer <- as.matrix(read.delim("singletons_excluded/rate_profiles/rates_7mer.txt"))
labels.3mer <- read.delim("3mer_mutations_ref.txt")
labels.5mer <- read.delim("5mer_mutations_ref.txt")
labels.7mer <- read.delim("7mer_mutations_ref.txt")
subpops.names <- c("TSI", "IBS", "CEU", "GBR", "FIN", "STU", "ITU", "BEB", "GIH", "PJL",
"ESN", "GWD", "LWK", "MSL", "YRI", "CDX", "CHB", "CHS", "JPT", "KHV")
# helper function that normalizes a vector by z or L1 method
norm <- function(vec, method = c("z", "L1", "fdiff")){
if (method == "L1"){ # normalize so vector sums to 1
u <- vec/sum(abs(vec))}
else if (method == "z"){ # normalize to mean 0, variance 1
u <- (vec - mean(vec))/sd(vec)}
else # normalize to fold change compared to mean
u <- vec/mean(vec)
return(u)
}
# normalizes a whole dataset by calling norm on each row
norm.byrow <- function(mat, m){
data <- t(apply(mat,1,norm, method = m))
return(data)
}
# makes a heatmap of a matrix and returns the row dendrogram as an object
make.heatmap <- function(data, logunits = T){
complete <- apply(data, 1, function(row) all(row != 0) & all(!is.na(row)))
data <- data[complete,]
if (logunits == T) {
data <- log2(data)
}
dr <- hclust(dist(data))
dc <- hclust(dist(t(data)))
heatmap.2(data, Rowv = as.dendrogram(dr), Colv = as.dendrogram(dc),
trace = 'none', col=colorRampPalette(c('blue', "white", 'red'))(n = 1000),
density.info = 'none', key.xlab = "",
key.title = NA,
reorderfun=function(d, w) reorder(d, w, agglo.FUN = min))
return(dr)
}
# makes a heatmap of all kmers with a certain set of 3mer or 5mer subcontexts
subcontext.heatmap <- function(rates, muts, labels, logunits = T){
if (nchar(muts[1]) == 6){
data <- get.3mer.subcontext.data(rates, muts, labels)
} else data <- get.5mer.subcontext.data(rates, muts, labels)
return(make.heatmap(data, logunits))
}
dr.3.all <- make.heatmap(norm.3mer.rates)
# plot "TCC->T" type 5mers
dr.5.GGA <- subcontext.heatmap(norm.5mer.rates, c("TCC->T"), labels.5mer)
norm.3mer.rates <- norm.byrow(rates.3mer, "fdiff")
norm.5mer.rates <- norm.byrow(rates.5mer, "fdiff")
norm.7mer.rates <- norm.byrow(rates.7mer, "fdiff")
# plot "TCC->T" type 5mers
dr.5.GGA <- subcontext.heatmap(norm.5mer.rates, c("TCC->T"), labels.5mer)
# plot "TCC->T" type 7mers
dr.7.GGA <- subcontext.heatmap(norm.7mer.rates, c("TCC->T"), labels.7mer)
dr.5.new3mer <- subcontext.heatmap(norm.5mer.rates,
c("ATC->A", "ACC->A", "GAC->T"), labels.5mer, F)
dr.5.new3mer <- subcontext.heatmap(norm.5mer.rates,
c("GAT->T", "ACC->A", "GAC->T"), labels.5mer, F)
norm.3mer.EAS <- norm.byrow(rates.3mer[,16:20], m = "fdiff")
dr.3mer.EASonly <- make.heatmap(norm.3mer.EAS)
# plot these JPT-enriched 3mers at a 5mer level
norm.5mer.EAS <- norm.byrow(rates.5mer[,16:20], m = "fdiff")
JPT3mers <- c("AAC->C", "TAC->C", "GAC->C", "CAC->C", "TAT->T")
dr.5.JPT3mers <- subcontext.heatmap(norm.5mer.EAS, JPT3mers, labels.5mer)
# plot JPT-enriched 3mers at a 7mer level
norm.7mer.EAS <- norm.byrow(norm.7mer.rates[,16:20], m = "fdiff")
dr.7.JPT3mers <- subcontext.heatmap(norm.7mer.EAS, JPT3mers, labels.7mer)
# 5mers in the first separated group which appears JPT elevated
c5 <- cutree(dr.5.JPT3mers, k = 3)
JPT5mers <- subset(names(c5), c5 == 2)
# plot 7mers which have one of these 5mers as the subcontext
dr.7.JPT5mers <- subcontext.heatmap(norm.7mer.EAS, JPT5mers, labels.7mer)
JPT5mers
c5 <- cutree(dr.5.JPT3mers, k = 5)
JPT5mers <- subset(names(c5), c5 == 3)
JPT5mers
c5 <- cutree(dr.5.JPT3mers, k = 5)
JPT5mers <- subset(names(c5), c5 == 3)
JPT5mers
JPT5mers <- subset(names(c5), c5 == 4)
JPT5mers
c5
JPT5mers <- subset(names(c5), c5 == 1)
1
JPT5mers
plot(c5)
# 5mers in the first separated group which appears JPT elevated
c5 <- cutree(dr.5.JPT3mers, k = 5)
JPT5mers <- subset(names(c5), c5 == 1)
# plot 7mers which have one of these 5mers as the subcontext
dr.7.JPT5mers <- subcontext.heatmap(norm.7mer.EAS, JPT5mers, labels.7mer)
dr.7.JPT5mers <- subcontext.heatmap(norm.7mer.EAS, JPT5mers, labels.7mer)
c7.2 <- cutree(dr.7.JPT5mers, k = 7)
plot(c7.2)
#get JPT7mers from clustering of JPT3mers
c7.1 <- cutree(dr.7.JPT3mers, k = 6)
JPT7mers.1 <- subset(names(c7.1), c7.1 == 2) # 111 polymorphisms
#get JPT7mers from clustering of JPT5mers
c7.2 <- cutree(dr.7.JPT5mers, k = 7)
JPT7mers.2 <- subset(names(c7.2), c7.2 == 1) # 112 polymorphisms
JPT7mers.3 <- intersect(JPT7mers.1, JPT7mers.2)
JPT7mers.3 <- intersect(JPT7mers.1, JPT7mers.2)
length(JPT3mers)
length(JPT5mers)
length(JPT7mers.1)
length(JPT7mers.2)
length(JPT7mers.3)
X.preprocessing <- function(counts, gw, muts = c()){
# if muts not specified, assume whole dataframe is used
if (length(muts) == 0){
muts <- counts$Context
}
counts <- subset(counts, is.element(counts$Context, muts))
autosomes <-counts$Count-counts$chrX
# construct data frame
result <- data.frame(matrix(ncol=3,nrow=length(counts$Context)))
colnames(result) <- c("Context", "Autosomes", "X")
result$Context <- counts$Context
result$Autosomes <- autosomes
result$X <- counts$chrX
# add gw_sites to data
result$Autosomal_sites <- rep(0, length(result$Context))
result$X_sites <- rep(0, length(result$Context))
for (i in 1:length(result$Context)){
mut <- as.character(result$Context[i])
context <- substr(mut, 1, nchar(mut)-3)
j <- which(gw$Context == context)
result$Autosomal_sites[i] <- gw$GW_total[j]- gw$X[j]
result$X_sites[i] <- gw$X[j]
}
return(result)
}
proptest.byrow <- function(counts, gw, muts = c(), method = "fisher"){
data <- X.preprocessing(counts, gw, muts)
data$p <- rep(1, length(data$Context))
data$x.enrichment <- rep(1, length(data$Context))
for (i in 1:length(data$Context)){
c.a <- c(data$X[i], data$Autosomes[i])
c.b <- c(data$X_sites[i], data$Autosomal_sites[i])
prop.a <- c.a[2]/c.b[2]
prop.x <- c.a[1]/c.b[1]
alpha <- prop.x/prop.a
data$x.enrichment[i]<- alpha
if (method == "fisher"){
data$p[i]<- fisher.test(rbind(c.a, c.b))$p
}
else {data$p[i]<- chisq.test(rbind(c.a, c.b))$p.value}
}
return(data)
}
counts.JPT.7mer <- read.delim("JPT_EAS_7mer_counts.txt")
getwd()
counts.JPT.7mer <- read.delim("singletons_excluded\subpops\7mer\JPT_EAS_7mer_counts.txt")
counts.JPT.7mer <- read.delim("singletons_excluded/subpops/7mer/JPT_EAS_7mer_counts.txt")
counts.JPT.7mer <- read.delim("singletons_excluded/subpops/7mer/JPT_EAS_7mer_counts.txt")
#counts.JPTCHBCHS.7mer <- read.delim("singletons_excluded/subpops/7mer/JPTCHSCHB_EAS_7mer_counts.txt")
gw.7mer <- read.delim("gw_counts/gw_7mer_counts.txt")
counts.JPT.5mer <- read.delim("singletons_excluded/subpops/7mer/JPT_EAS_5mer_counts.txt")
counts.JPT.7mer <- read.delim("singletons_excluded/subpops/7mer/JPT_EAS_7mer_counts.txt")
#counts.JPTCHBCHS.7mer <- read.delim("singletons_excluded/subpops/7mer/JPTCHSCHB_EAS_7mer_counts.txt")
gw.7mer <- read.delim("gw_counts/gw_7mer_counts.txt")
counts.JPT.5mer <- read.delim("singletons_excluded/subpops/5mer/JPT_EAS_5mer_counts.txt")
gw.5mer <- read.delim("gw_counts/gw_5mer_counts.txt")
counts.JPT.3mer <- read.delim("singletons_excluded/subpops/3mer/JPT_EAS_3mer_counts.txt")
gw.3mer <- read.delim("gw_counts/gw_3mer_counts.txt")
p.3mer <- proptest.byrow(counts.JPT.3mer, gw.3mer, JPT3mers, method = "chi")
kable(p.3mer, caption = "X enrichment among 3mer cluster")
binomtest.byrow <- function(counts, gw, muts = c()){
data <- X.preprocessing(counts, gw, c())
data$alpha <- rep(1, length(data$Context))
data$p.0 <- rep(0, length(data$Context))
data$p.MLE <- rep(0, length(data$Context))
data$p <- rep(1, length(data$Context))
muts.X <- sum(data$X)
sites.X <- sum(data$X_sites)
muts.A <- sum(data$Autosomes)
sites.A <- sum(data$Autosomal_sites)
for (i in 1:length(data$Context)){
# remove data for ith polymorphism type
#m.X <- muts.X - data$X[i]
#s.X <- sites.X - data$X_sites[i]
#m.A <- muts.A - data$Autosomes[i]
#s.A <- sites.A - data$Autosomal_sites[i]
# estimate parameters and run test
alpha <- (muts.X/sites.X)/(muts.A/sites.A)
data$alpha[i] <- alpha
p.0 <- alpha*(data$Autosomes[i]/data$Autosomal_sites[i])
data$p.0[i] <- p.0
data$p.MLE[i] <- data$X[i]/data$X_sites[i]
data$p[i] <- binom.test(data$X[i], n = data$X_sites[i], p = p.0)$p.value
if (data$Autosomes[i]< 20){
data$p[i] <- 1
}
}
if (length(muts)!=0){
data <- subset(data, is.element(data$Context, muts))
}
return(data)
}
p.3mer <- binomtest.byrow(counts.JPT.3mer, gw.3mer, JPT3mers)
kable(p.3mer, caption = "X enrichment among 3mer cluster")
p.5mer <- binomtest.byrow(counts.JPT.5mer, gw.5mer, JPT5mers)
kable(p.5mer, caption = "X enrichment among 5mer cluster")
source('C:/Users/VoightLab/Dropbox/SNP_rates/Code/data_wrangling/import_and_process.R')
kable(p.5mer, caption = "X enrichment among 5mer cluster")
source('C:/Users/VoightLab/Dropbox/SNP_rates/Code/data_wrangling/import_and_process.R')
p.3mer <- binomtest.byrow(counts.JPT.3mer, gw.3mer, JPT3mers)
kable(p.3mer, caption = "X enrichment among 3mer cluster")
p.5mer <- binomtest.byrow(counts.JPT.5mer, gw.5mer, JPT5mers)
p.5mer <- binomtest.byrow(counts.JPT.5mer, gw.5mer, JPT5mers)
kable(p.5mer, caption = "X enrichment among 5mer cluster")
kable(head(p.5mer, n = 10), caption = "X enrichment among 5mer cluster")
p.5mer$fdr <- p.adjust(p.5mer$p, "fdr")
subset(p.5mer, p.5mer$fdr < 0.1)
kable(head(p.5mer, n = 10), caption = "X enrichment among 5mer cluster")
p.7mer.1 <- binomtest.byrow(counts.JPT.7mer, gw.7mer, JPT7mers.1)
kable(subset(p.5mer, p.5mer$fdr < 0.05), caption = "5mers significantly enriched on X")
kable(subset(p.5mer, p.5mer$fdr < 0.1), caption = "5mers significantly enriched on X")
kable(subset(p.5mer[-c(2:4)], p.5mer$fdr < 0.1), row.names = F, caption = "5mers significantly enriched on X")
kable(subset(p.5mer[-c(2:6)], p.5mer$fdr < 0.1), row.names = F, caption = "5mers significantly enriched on X")
p.7mer.1 <- binomtest.byrow(counts.JPT.7mer, gw.7mer, JPT7mers.1)
length(JPT7mers.1)
c7.1 <- cutree(dr.7.JPT3mers, k = 6)
JPT7mers.1 <- subset(names(c7.1), c7.1 == 2) # 111 polymorphisms
c5 <- cutree(dr.5.JPT3mers, k = 4)
plot(c5)
c5 <- cutree(dr.5.JPT3mers, k = 5)
plot(c5)
dr.7.JPT5mers <- subcontext.heatmap(norm.7mer.EAS, JPT5mers, labels.7mer)
c7.1 <- cutree(dr.7.JPT3mers, k = 4)
plot(c7.1)
JPT7mers.1 <- subset(names(c7.1), c7.1 == 2) # 111 polymorphisms
is.element(JPT7mers.1, "CAAACCC->C")
c7.2 <- cutree(dr.7.JPT5mers, k = 7)
JPT7mers.2 <- subset(names(c7.2), c7.2 == 1)
length(JPT7mers.1)
p.7mer.1 <- binomtest.byrow(counts.JPT.7mer, gw.7mer, JPT7mers.1)
kable(p.7mer.1, caption = "X enrichment among 7mer cluster 1")
p.7mer.1$fdr <- p.adjust(p.7mer.1$p, "fdr")
kable(subset(p.7mer.1[-c(2:6)], p.7mer.1$fdr < 0.1), row.names = F, caption = "7mers significantly enriched on X")
JPT7mers.3 <- intersect(JPT7mers.1, JPT7mers.2)
#get JPT7mers from clustering of JPT3mers
c7.1 <- cutree(dr.7.JPT3mers, k = 4)
JPT7mers.1 <- subset(names(c7.1), c7.1 == 2)
#get JPT7mers from clustering of JPT5mers
c7.2 <- cutree(dr.7.JPT5mers, k = 7)
JPT7mers.2 <- subset(names(c7.2), c7.2 == 1)
JPT7mers.3 <- intersect(JPT7mers.1, JPT7mers.2)
length(JPT3mers)
length(JPT5mers)
length(JPT7mers.1)
length(JPT7mers.2)
length(JPT7mers.3)
b
kable(subset(p.7mer.1[-c(2:6)], p.7mer.1$fdr < 0.1), row.names = F, caption = "7mers significantly enriched on X")
# given a dendrogram, run a pooled test for X enrichment
# excluding contexts in "exclude"
chi.bycluster <- function(data, gw, dr, k, n, exclude = c()){
# get cluster members
members <- cutree(dr, k = k)
muts <- subset(names(members), members == n)
# remove those to be excluded
muts <- subset(muts, !is.element(muts, exclude))
data <- X.preprocessing(data, gw, c())
# set up table and test
muts.A <- sum(data$Autosomes)
muts.X <- sum(data$X)
sites.A <- sum(data$Autosomal_sites)
sites.X <- sum(data$X_sites)
alpha <- (muts.X/sites.X)/(muts.A/sites.A)
m.A <- sum(subset(data$Autosomes, is.element(data$Context, muts)))
m.X <- sum(subset(data$X, is.element(data$Context, muts)))
s.A <- sum(subset(data$Autosomal_sites, is.element(data$Context, muts)))
s.X <- sum(subset(data$X_sites, is.element(data$Context, muts)))
p.0 <- alpha*(m.A/s.A)
p.MLE <- m.X/s.X
result <- c(binom.test(m.X, s.X, p.0)$p.value, alpha, p.0, p.MLE)
names(result)<- c("Chisquared p", "alpha", "P_0", "MLE")
return(result)
}
# given a list of contexts, run a pooled test for X enrichment
# excluding contexts in "exclude"
chi.bysubset <- function(data, gw, muts = c()){
data <- X.preprocessing(data, gw, c())
# set up table and test
muts.A <- sum(data$Autosomes)
muts.X <- sum(data$X)
sites.A <- sum(data$Autosomal_sites)
sites.X <- sum(data$X_sites)
alpha <- (muts.X/sites.X)/(muts.A/sites.A)
m.A <- sum(subset(data$Autosomes, is.element(data$Context, muts)))
m.X <- sum(subset(data$X, is.element(data$Context, muts)))
s.A <- sum(subset(data$Autosomal_sites, is.element(data$Context, muts)))
s.X <- sum(subset(data$X_sites, is.element(data$Context, muts)))
p.0 <- alpha*(m.A/s.A)
p.MLE <- m.X/s.X
result <- c(binom.test(m.X, s.X, p.0)$p.value, alpha, p.0, p.MLE)
names(result)<- c("Chisquared p", "alpha", "P_0", "MLE")
return(result)
}
#3mer groups
chi.bycluster(data = counts.JPT.3mer, gw = gw.3mer,dr = dr.3mer.EASonly, k = 2, n = 2, exclude = c())
chi.bysubset(data = counts.JPT.3mer, gw = gw.3mer, muts = JPT3mers)
#5mer groups
chi.bycluster(data = counts.JPT.5mer, gw = gw.5mer,dr = dr.5.JPT3mers, k = 3, n = 2, exclude = c())
#7mer groups
chi.bycluster(data = counts.JPT.7mer, gw = gw.7mer,dr = dr.7.JPT3mers, k = 6, n = 2)
#3mer groups
chi.bycluster(data = counts.JPT.3mer, gw = gw.3mer,dr = dr.3mer.EASonly, k = 2, n = 2, exclude = c())
chi.bysubset(data = counts.JPT.3mer, gw = gw.3mer, muts = JPT3mers)
#5mer groups
chi.bycluster(data = counts.JPT.5mer, gw = gw.5mer,dr = dr.5.JPT3mers, k = 3, n = 2, exclude = c())
#7mer groups
chi.bycluster(data = counts.JPT.7mer, gw = gw.7mer,dr = dr.7.JPT3mers, k = 6, n = 2)
chi.bycluster(data = counts.JPT.7mer, gw = gw.7mer,dr = dr.7.JPT3mers, k = 6, n = 2,
exclude = c("CAAACCC->C", "CCCACAG->C", "TTTATTT->T"))
chi.bycluster(data = counts.JPT.7mer, gw = gw.7mer,dr = dr.7.JPT5mers, k = 3, n = 1)
chi.bycluster(data = counts.JPT.7mer, gw = gw.7mer,dr = dr.7.JPT5mers, k = 3, n = 1,
exclude = c("CAAACCC->C", "CCCACAG->C", "TTTATTT->T"))
chi.bysubset(counts.JPT.7mer, gw.7mer, JPT7mers.3)
muts.7.filtered <- subset(JPT7mers.3, !is.element(JPT7mers.3, c("CAAACCC->C", "CCCACAG->C", "TTTATTT->T")))
chi.bysubset(counts.JPT.7mer, gw.7mer, muts.7.filtered)
plot(dr.3mer.EASonly)
chi.bycluster(data = counts.JPT.3mer, gw = gw.3mer,dr = dr.3mer.EASonly, k = 2, n = 2, exclude = c())
chi.bysubset(data = counts.JPT.3mer, gw = gw.3mer, muts = JPT3mers)
chi.bycluster(data = counts.JPT.3mer, gw = gw.3mer,dr = dr.3mer.EASonly, k = 2, n = 1, exclude = c()) # p = 0.2
chi.bycluster(data = counts.JPT.5mer, gw = gw.5mer,dr = dr.5.JPT3mers, k = 5, n = 1, exclude = c())
chi.bycluster(data = counts.JPT.7mer, gw = gw.7mer,dr = dr.7.JPT3mers, k = 4, n = 2)
which(JPT7mers.1 == "CAAACCC->C")
chi.bycluster(data = counts.JPT.7mer, gw = gw.7mer,dr = dr.7.JPT3mers, k = 4, n = 2,
exclude = c("CAAACCC->C", "CCCACAG->C", "TTTATTT->T"))
chi.bycluster(data = counts.JPT.7mer, gw = gw.7mer,dr = dr.7.JPT5mers, k = 7, n = 1)
length(JPT7mers.2)
chi.bycluster(data = counts.JPT.7mer, gw = gw.7mer,dr = dr.7.JPT5mers, k = 7, n = 1,
exclude = c("CAAACCC->C", "CCCACAG->C", "TTTATTT->T"))
chi.bysubset(counts.JPT.7mer, gw.7mer, JPT7mers.3)
muts.7.filtered <- subset(JPT7mers.3, !is.element(JPT7mers.3, c("CAAACCC->C", "CCCACAG->C", "TTTATTT->T")))
chi.bysubset(counts.JPT.7mer, gw.7mer, muts.7.filtered)
x.3mers <- binomtest.byrow(counts.JPT.3mer, gw.3mer)
kable(subset(x.3mers, x.3mers$p < 0.05/length(x.3mers$Context)))
x.5mers <- binomtest.byrow(counts.JPT.5mer, gw.5mer)
kable(subset(x.5mers, x.5mers$p < 0.05/length(x.5mers$Context)))
x.7mers <- binomtest.byrow(counts.JPTCHBCHS.7mer, gw.7mer)
counts.JPTCHBCHS.7mer <- read.delim("singletons_excluded/subpops/7mer/JPTCHSCHB_EAS_7mer_counts.txt")
x.7mers <- binomtest.byrow(counts.JPTCHBCHS.7mer, gw.7mer)
kable(subset(x.7mers, x.7mers$p < 0.05/length(x.7mers$Context)))
source('C:/Users/VoightLab/Dropbox/SNP_rates/Code/data_wrangling/import_and_process.R')
source('C:/Users/VoightLab/Dropbox/SNP_rates/Code/data_wrangling/import_and_process.R')
source('C:/Users/VoightLab/Dropbox/SNP_rates/Code/data_wrangling/import_and_process.R')
