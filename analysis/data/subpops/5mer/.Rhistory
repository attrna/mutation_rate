gw.3mer <- read.delim("gw_3mer_counts.txt")
p.3mer <- proptest.byrow(X.preprocessing(counts.JPT.3mer, JPT3mers), gw.3mer, method = "chi")
knitr::opts_knit$set(root.dir = "C:/Users/VoightLab/Dropbox/SNP_rates/Analyses/clustering/data")
# import libraries we need
library(knitr)
library(ggplot2)
library(gplots)
library(stats)
library(readr)
# load data
rates.3mer <- as.matrix(read.delim("rates_3mer.txt"))
rates.5mer <- as.matrix(read.delim("rates_5mer.txt"))
rates.7mer <- as.matrix(read.delim("rates_7mer.txt"))
labels.3mer <- read.delim("3mer_mutations_ref")
labels.5mer <- read.delim("5mer_mutations_ref")
labels.7mer <- read.delim("7mer_mutations_ref")
subpops.names <- c("TSI", "IBS", "CEU", "GBR", "FIN", "STU", "ITU", "BEB", "GIH", "PJL",
"ESN", "GWD", "LWK", "MSL", "YRI", "CDX", "CHB", "CHS", "JPT", "KHV")
# helper function that normalizes a vector by z or L1 method
norm <- function(vec, method = c("z", "L1", "fdiff")){
if (method == "L1"){ # normalize so vector sums to 1
u <- vec/sum(abs(vec))}
else if (method == "z"){ # normalize to mean 0, variance 1
u <- (vec - mean(vec))/sd(vec)}
else # normalize to fold change compared to mean
u <- vec/mean(vec)
return(u)
}
# normalizes a whole dataset by calling norm on each row
norm.byrow <- function(mat, m){
data <- t(apply(mat,1,norm, method = m))
return(data)
}
norm.3mer.rates <- norm.byrow(rates.3mer, "fdiff")
norm.5mer.rates <- norm.byrow(rates.5mer, "fdiff")
norm.7mer.rates <- norm.byrow(rates.7mer, "fdiff")
get.5mer.subcontext.data <- function(rates, muts, labels){
# take subset with 5mer subcontexts in muts
data <- subset(rates, is.element(labels$X5mer, muts))
complete <- apply(data, 1, function(row) all(row != 0) & all(!is.na(row)))
data <- data[complete,]
return(data)
}
get.3mer.subcontext.data <- function(rates, muts, labels){
# take subset with 3mer subcontexts in muts
data <- subset(rates, is.element(labels$X3mer, muts))
complete <- apply(data, 1, function(row) all(row != 0) & all(!is.na(row)))
data <- data[complete,]
return(data)
}
# makes a heatmap of a matrix and returns the row dendrogram as an object
make.heatmap <- function(data, logunits = T){
complete <- apply(data, 1, function(row) all(row != 0) & all(!is.na(row)))
data <- data[complete,]
if (logunits == T) {
data <- log2(data)
}
dr <- hclust(dist(data))
dc <- hclust(dist(t(data)))
heatmap.2(data, Rowv = as.dendrogram(dr), Colv = as.dendrogram(dc),
trace = 'none', col=colorRampPalette(c('blue', "white", 'red'))(n = 1000))
return(dr)
}
# makes a heatmap of all kmers with a certain set of 3mer or 5mer subcontexts
subcontext.heatmap <- function(rates, muts, labels, logunits = T){
if (nchar(muts[1]) == 6){
data <- get.3mer.subcontext.data(rates, muts, labels)
} else data <- get.5mer.subcontext.data(rates, muts, labels)
return(make.heatmap(data, logunits))
}
dr.3.all <- make.heatmap(norm.3mer.rates)
# plot "GGA->A" type 5mers
dr.5.GGA <- subcontext.heatmap(norm.5mer.rates, c("GGA->A"), labels.5mer)
# plot "GGA->A" type 7mers
dr.7.GGA <- subcontext.heatmap(norm.7mer.rates, c("GGA->A"), labels.7mer)
dr.5.new3mer <- subcontext.heatmap(norm.5mer.rates,
c("ATC->A", "ACC->A", "GAC->T"), labels.5mer, F)
norm.3mer.EAS <- norm.byrow(rates.3mer[,16:20], m = "fdiff")
dr.3mer.EASonly <- make.heatmap(norm.3mer.EAS)
# plot these JPT-enriched 3mers at a 5mer level
norm.5mer.EAS <- norm.byrow(rates.5mer[,16:20], m = "fdiff")
JPT3mers <- c("AAC->C", "ATC->G", "GAC->C", "CAC->C", "ATA->A")
dr.5.JPT3mers <- subcontext.heatmap(norm.5mer.EAS, JPT3mers, labels.5mer)
# plot JPT-enriched 3mers at a 7mer level
norm.7mer.EAS <- norm.byrow(norm.7mer.rates[,16:20], m = "fdiff")
dr.7.JPT3mers <- subcontext.heatmap(norm.7mer.EAS, JPT3mers, labels.7mer)
# 5mers in the first separated group which appears JPT elevated
c5 <- cutree(dr.5.JPT3mers, k = 3)
JPT5mers <- subset(names(c5), c5 == 2)
# plot 7mers which have one of these 5mers as the subcontext
dr.7.JPT5mers <- subcontext.heatmap(norm.7mer.EAS, JPT5mers, labels.7mer)
#get JPT7mers from clustering of JPT3mers
c7.1 <- cutree(dr.7.JPT3mers, k = 6)
JPT7mers.1 <- subset(names(c7.1), c7.1 == 2) # 111 polymorphisms
#get JPT7mers from clustering of JPT5mers
c7.2 <- cutree(dr.7.JPT5mers, k = 3)
JPT7mers.2 <- subset(names(c7.2), c7.2 == 1) # 112 polymorphisms
JPT7mers.3 <- intersect(JPT7mers.1, JPT7mers.2)
X.preprocessing <- function(counts, gw, muts = c()){
# if muts not specified, assume whole dataframe is used
if (length(muts) == 0){
muts <- counts$Context
}
counts <- subset(counts, is.element(counts$Context, muts))
autosomes <-counts$Count-counts$chrX
# construct data frame
result <- data.frame(matrix(ncol=3,nrow=length(counts$Context)))
colnames(result) <- c("Context", "Autosomes", "X")
result$Context <- counts$Context
result$Autosomes <- autosomes
result$X <- counts$chrX
# add gw_sites to data
result$Autosomal_sites <- rep(0, length(result$Context))
result$X_sites <- rep(0, length(result$Context))
for (i in 1:length(result$Context)){
mut <- as.character(result$Context[i])
context <- substr(mut, 1, nchar(mut)-3)
j <- which(gw$Context == context)
data$Autosomal_sites[i] <- gw$GW_total[j]- gw$X[j]
data$X_sites[i] <- gw$X[j]
}
return(result)
}
proptest.byrow <- function(counts, gw, muts = c(), method = "fisher"){
data <- X.preprocessing(counts, gw, muts)
data$p <- rep(1, length(data$Context))
for (i in 1:length(data$Context)){
c.a <- c(data$X[i], data$Autosomes[i])
c.b <- c(data$X_sites[i], data$Autosomal_sites[i])
if (method == "fisher"){
data$p[i]<- fisher.test(rbind(c.a, c.b))$p
}
else {data$p[i]<- chisq.test(rbind(c.a, c.b))$p.value}
data$Autosomal_sites[i] <- c.b[1]
data$X_sites[i] <- c.b[2]
}
return(data)
}
counts.JPT.7mer <- read.delim("JPT_EAS_7mer_counts.txt")
counts.JPTCHBCHS.7mer <- read.delim("JPTCHSCHB_EAS_7mer_counts.txt")
gw.7mer <- read.delim("gw_7mer_counts.txt")
counts.JPT.5mer <- read.delim("JPT_EAS_5mer_counts.txt")
gw.5mer <- read.delim("gw_5mer_counts.txt")
counts.JPT.3mer <- read.delim("JPT_EAS_3mer_counts.txt")
gw.3mer <- read.delim("gw_3mer_counts.txt")
p.3mer <- proptest.byrow(X.preprocessing(counts.JPT.3mer, JPT3mers), gw.3mer, method = "chi")
p.3mer <- proptest.byrow(counts.JPT.3mer, gw.3mer, JPT3mers, method = "chi")
p.3mer
X.preprocessing <- function(counts, gw, muts = c()){
# if muts not specified, assume whole dataframe is used
if (length(muts) == 0){
muts <- counts$Context
}
counts <- subset(counts, is.element(counts$Context, muts))
autosomes <-counts$Count-counts$chrX
# construct data frame
result <- data.frame(matrix(ncol=3,nrow=length(counts$Context)))
colnames(result) <- c("Context", "Autosomes", "X")
result$Context <- counts$Context
result$Autosomes <- autosomes
result$X <- counts$chrX
# add gw_sites to data
result$Autosomal_sites <- rep(0, length(result$Context))
result$X_sites <- rep(0, length(result$Context))
for (i in 1:length(result$Context)){
mut <- as.character(result$Context[i])
context <- substr(mut, 1, nchar(mut)-3)
j <- which(gw$Context == context)
result$Autosomal_sites[i] <- gw$GW_total[j]- gw$X[j]
result$X_sites[i] <- gw$X[j]
}
return(result)
}
p.3mer <- proptest.byrow(counts.JPT.3mer, gw.3mer, JPT3mers, method = "chi")
p.3mer
p.3mer <- proptest.byrow(counts.JPT.3mer, gw.3mer, JPT3mers, method = "chi")
p.7mer.JPTCHSCHB.3 <- proptest.byrow(X.preprocessing(counts.JPTCHBCHS.7mer, JPT7mers.3), gw.7mer)
kable(p.3mer, caption = "X enrichment among 3mer cluster")
p.5mer <- proptest.byrow(counts.JPT.5mer, gw.5mer, JPT5mers)
kable(p.5mer, caption = "X enrichment among 5mer cluster")
pbinom(2, 18, 0.05)
chi.bycluster(counts.JPT.7mer, gw.7mer, dr.7.JPT3mers, 6, 6)
chi.bycluster(counts.JPT.3mer, gw.3mer, dr.3mer.EASonly, 2, 2)
data <- counts.JPT.3mer
gw <- gw.3mer
dr <- dr.3mer.EASonly
k = 2
n = 2
members <- cutree(dr, k = k)
muts <- subset(names(members), members == n)
muts <- subset(muts, !is.element(muts, exclude))
exclude = c()
muts <- subset(muts, !is.element(muts, exclude))
data <- X.preprocessing(data, gw, muts)
c.a <- c(sum(data$Autosomes), sum(data$X))
c.b <- c(sum(data$Autosomal_sites), sum(data$X_sites))
prop.a <- c.a[1]/c.b[1]
prop.x <- c.a[2]/c.b[2]
x.enrichment <- prop.x/prop.a
x
View(data)
x.enrichment
result <- c(chisq.test(rbind(c.a,c.b))$p.value, x.enrichment)
names(result)<- c("Chisquared p", "x enrichment")
chi.bycluster(counts.JPT.3mer, gw.3mer, dr.3mer.EASonly, 2, 2)
chi.bycluster(data = counts.JPT.3mer, gw = gw.3mer,dr = dr.3mer.EASonly, k = 2, n = 2)
chi.bycluster(data = counts.JPT.3mer, gw = gw.3mer,dr = dr.3mer.EASonly, k = 2, n = 2, exclude = c())
data = counts.JPT.3mer; gw = gw.3mer;dr = dr.3mer.EASonly; k = 2; n = 2; exclude = c()
members <- cutree(dr, k = k)
muts <- subset(names(members), members == n)
muts <- subset(muts, !is.element(muts, exclude))
data <- X.preprocessing(data, gw, muts)
c.a <- c(sum(data$Autosomes), sum(data$X))
c.b <- c(sum(data$Autosomal_sites), sum(data$X_sites))
prop.a <- c.a[1]/c.b[1]
prop.x <- c.a[2]/c.b[2]
x.enrichment <- prop.x/prop.a
result <- c(chisq.test(rbind(c.a,c.b))$p.value, x.enrichment)
names(result)<- c("Chisquared p", "x enrichment")
# given a dendrogram, run a pooled test for X enrichment
# excluding contexts in "exclude"
chi.bycluster <- function(data, gw, dr, k, n, exclude = c()){
# get cluster members
members <- cutree(dr, k = k)
muts <- subset(names(members), members == n)
# remove those to be excluded
muts <- subset(muts, !is.element(muts, exclude))
data <- X.preprocessing(data, gw, muts)
# set up table and test
c.a <- c(sum(data$Autosomes), sum(data$X))
c.b <- c(sum(data$Autosomal_sites), sum(data$X_sites))
prop.a <- c.a[1]/c.b[1]
prop.x <- c.a[2]/c.b[2]
x.enrichment <- prop.x/prop.a
result <- c(chisq.test(rbind(c.a,c.b))$p.value, x.enrichment)
names(result)<- c("Chisquared p", "x enrichment")
return(result)
}
# given a list of contexts, run a pooled test for X enrichment
# excluding contexts in "exclude"
chi.bysubset <- function(data, gw, muts){
data <- X.preprocessing(data, gw, muts)
# set up table and test
c.a <- c(sum(data$Autosomes), sum(data$X))
c.b <- c(sum(data$Autosomal_sites), sum(data$X_sites))
prop.a <- c.a[1]/c.b[1]
prop.x <- c.a[2]/c.b[2]
x.enrichment <- prop.x/prop.a
result <- c(chisq.test(rbind(c.a,c.b))$p.value, x.enrichment)
names(result)<- c("Chisquared p", "x enrichment")
return(result)
}
chi.bycluster(data = counts.JPT.3mer, gw = gw.3mer,dr = dr.3mer.EASonly, k = 2, n = 2, exclude = c())
chi.bycluster(data = counts.JPT.3mer, gw = gw.3mer,dr = dr.3mer.EASonly, k = 2, n = 1, exclude = c())
chi.bycluster(data = counts.JPT.3mer, gw = gw.3mer,dr = dr.3mer.EASonly, k = 2, n = 2, exclude = c())
proptest.byrow <- function(counts, gw, muts = c(), method = "fisher"){
data <- X.preprocessing(counts, gw, muts)
data$p <- rep(1, length(data$Context))
data$x.enrichment
for (i in 1:length(data$Context)){
c.a <- c(data$X[i], data$Autosomes[i])
c.b <- c(data$X_sites[i], data$Autosomal_sites[i])
if (method == "fisher"){
data$p[i]<- fisher.test(rbind(c.a, c.b))$p
}
else {data$p[i]<- chisq.test(rbind(c.a, c.b))$p.value}
data$Autosomal_sites[i] <- c.b[1]
data$X_sites[i] <- c.b[2]
prop.a <- c.a[1]/c.b[1]
prop.x <- c.a[2]/c.b[2]
x.enrichment <- prop.x/prop.a
data$x.enrichment[i]<- x.enrichment
}
return(data)
}
p.3mer <- proptest.byrow(counts.JPT.3mer, gw.3mer, JPT3mers, method = "chi")
kable(p.3mer, caption = "X enrichment among 3mer cluster")
chi.bysubset(data = counts.JPT.3mer, gw = gw.3mer, muts = JPT3mers)
JPT3mers
p.3mer <- proptest.byrow(counts.JPT.3mer, gw.3mer, JPT3mers, method = "chi")
kable(p.3mer, caption = "X enrichment among 3mer cluster")
prop.a <- sum(p.3mer$Autosomes)/sum(p.3mer$Autosomal_sites)
proptest.byrow <- function(counts, gw, muts = c(), method = "fisher"){
data <- X.preprocessing(counts, gw, muts)
data$p <- rep(1, length(data$Context))
data$x.enrichment
for (i in 1:length(data$Context)){
c.a <- c(data$X[i], data$Autosomes[i])
c.b <- c(data$X_sites[i], data$Autosomal_sites[i])
if (method == "fisher"){
data$p[i]<- fisher.test(rbind(c.a, c.b))$p
}
else {data$p[i]<- chisq.test(rbind(c.a, c.b))$p.value}
data$Autosomal_sites[i] <- c.b[1]
data$X_sites[i] <- c.b[2]
prop.a <- c.a[2]/c.b[2]
prop.x <- c.a[1]/c.b[1]
x.enrichment <- prop.x/prop.a
data$x.enrichment[i]<- x.enrichment
}
return(data)
}
p.3mer <- proptest.byrow(counts.JPT.3mer, gw.3mer, JPT3mers, method = "chi")
kable(p.3mer, caption = "X enrichment among 3mer cluster")
chi.bycluster(data = counts.JPT.3mer, gw = gw.3mer,dr = dr.3mer.EASonly, k = 2, n = 2, exclude = c())
chi.bysubset(data = counts.JPT.3mer, gw = gw.3mer, muts = JPT3mers)
chi.bysubset(EAS_3mer_counts, gw.3mer)
knitr::opts_knit$set(root.dir = "C:/Users/VoightLab/Dropbox/SNP_rates/Analyses/clustering/data")
# import libraries we need
library(knitr)
library(ggplot2)
library(gplots)
library(stats)
library(readr)
# load data
rates.3mer <- as.matrix(read.delim("rates_3mer.txt"))
rates.5mer <- as.matrix(read.delim("rates_5mer.txt"))
rates.7mer <- as.matrix(read.delim("rates_7mer.txt"))
labels.3mer <- read.delim("3mer_mutations_ref")
labels.5mer <- read.delim("5mer_mutations_ref")
labels.7mer <- read.delim("7mer_mutations_ref")
subpops.names <- c("TSI", "IBS", "CEU", "GBR", "FIN", "STU", "ITU", "BEB", "GIH", "PJL",
"ESN", "GWD", "LWK", "MSL", "YRI", "CDX", "CHB", "CHS", "JPT", "KHV")
# helper function that normalizes a vector by z or L1 method
norm <- function(vec, method = c("z", "L1", "fdiff")){
if (method == "L1"){ # normalize so vector sums to 1
u <- vec/sum(abs(vec))}
else if (method == "z"){ # normalize to mean 0, variance 1
u <- (vec - mean(vec))/sd(vec)}
else # normalize to fold change compared to mean
u <- vec/mean(vec)
return(u)
}
# normalizes a whole dataset by calling norm on each row
norm.byrow <- function(mat, m){
data <- t(apply(mat,1,norm, method = m))
return(data)
}
norm.3mer.rates <- norm.byrow(rates.3mer, "fdiff")
norm.5mer.rates <- norm.byrow(rates.5mer, "fdiff")
norm.7mer.rates <- norm.byrow(rates.7mer, "fdiff")
get.5mer.subcontext.data <- function(rates, muts, labels){
# take subset with 5mer subcontexts in muts
data <- subset(rates, is.element(labels$X5mer, muts))
complete <- apply(data, 1, function(row) all(row != 0) & all(!is.na(row)))
data <- data[complete,]
return(data)
}
get.3mer.subcontext.data <- function(rates, muts, labels){
# take subset with 3mer subcontexts in muts
data <- subset(rates, is.element(labels$X3mer, muts))
complete <- apply(data, 1, function(row) all(row != 0) & all(!is.na(row)))
data <- data[complete,]
return(data)
}
# makes a heatmap of a matrix and returns the row dendrogram as an object
make.heatmap <- function(data, logunits = T){
complete <- apply(data, 1, function(row) all(row != 0) & all(!is.na(row)))
data <- data[complete,]
if (logunits == T) {
data <- log2(data)
}
dr <- hclust(dist(data))
dc <- hclust(dist(t(data)))
heatmap.2(data, Rowv = as.dendrogram(dr), Colv = as.dendrogram(dc),
trace = 'none', col=colorRampPalette(c('blue', "white", 'red'))(n = 1000))
return(dr)
}
# makes a heatmap of all kmers with a certain set of 3mer or 5mer subcontexts
subcontext.heatmap <- function(rates, muts, labels, logunits = T){
if (nchar(muts[1]) == 6){
data <- get.3mer.subcontext.data(rates, muts, labels)
} else data <- get.5mer.subcontext.data(rates, muts, labels)
return(make.heatmap(data, logunits))
}
dr.3.all <- make.heatmap(norm.3mer.rates)
# plot "GGA->A" type 5mers
dr.5.GGA <- subcontext.heatmap(norm.5mer.rates, c("GGA->A"), labels.5mer)
# plot "GGA->A" type 7mers
dr.7.GGA <- subcontext.heatmap(norm.7mer.rates, c("GGA->A"), labels.7mer)
dr.5.new3mer <- subcontext.heatmap(norm.5mer.rates,
c("ATC->A", "ACC->A", "GAC->T"), labels.5mer, F)
norm.3mer.EAS <- norm.byrow(rates.3mer[,16:20], m = "fdiff")
dr.3mer.EASonly <- make.heatmap(norm.3mer.EAS)
# given a dendrogram, run a pooled test for X enrichment
# excluding contexts in "exclude"
chi.bycluster <- function(data, gw, dr, k, n, exclude = c()){
# get cluster members
members <- cutree(dr, k = k)
muts <- subset(names(members), members == n)
# remove those to be excluded
muts <- subset(muts, !is.element(muts, exclude))
data <- X.preprocessing(data, gw, muts)
# set up table and test
c.a <- c(sum(data$Autosomes), sum(data$X))
c.b <- c(sum(data$Autosomal_sites), sum(data$X_sites))
prop.a <- c.a[1]/c.b[1]
prop.x <- c.a[2]/c.b[2]
x.enrichment <- prop.x/prop.a
result <- c(chisq.test(rbind(c.a,c.b))$p.value, x.enrichment)
names(result)<- c("Chisquared p", "x enrichment")
return(result)
}
# given a list of contexts, run a pooled test for X enrichment
# excluding contexts in "exclude"
chi.bysubset <- function(data, gw, muts = c()){
data <- X.preprocessing(data, gw, muts)
# set up table and test
c.a <- c(sum(data$Autosomes), sum(data$X))
c.b <- c(sum(data$Autosomal_sites), sum(data$X_sites))
prop.a <- c.a[1]/c.b[1]
prop.x <- c.a[2]/c.b[2]
x.enrichment <- prop.x/prop.a
result <- c(chisq.test(rbind(c.a,c.b))$p.value, x.enrichment)
names(result)<- c("Chisquared p", "x enrichment")
return(result)
}
chi.bysubset(EAS_3mer_counts, gw.3mer)
chi.bysubset(SAS_3mer_counts, gw.3mer)
chi.bysubset(EAS_3mer_counts, gw.3mer)
chi.bysubset(AFR_3mer_counts, gw.3mer)
chi.bysubset(data = counts.JPT.3mer, gw = gw.3mer, muts = JPT3mers)
chi.bycluster(data = counts.JPT.3mer, gw = gw.3mer,dr = dr.3mer.EASonly, k = 2, n = 2, exclude = c())
chi.bycluster(data = counts.JPT.3mer, gw = gw.3mer,dr = dr.3mer.EASonly, k = 2, n = 1, exclude = c())
chi.bysubset(data = counts.JPT.3mer, gw = gw.3mer, muts = JPT3mers)
chi.bycluster(data = counts.JPT.3mer, gw = gw.3mer,dr = dr.3mer.EASonly, k = 2, n = 2, exclude = c())
chi.bysubset(EAS_3mer_counts, gw.3mer)
chi.bysubset(EUR_3mer_counts, gw.3mer)
chi.bysubset(SAS_3mer_counts, gw.3mer)
chi.bysubset(EAS_3mer_counts, gw.3mer)
chi.bysubset(AFR_3mer_counts, gw.3mer)
chi.bysubset(EUR_3mer_counts, gw.3mer)
chi.bysubset(SAS_3mer_counts, gw.3mer)
chi.bysubset(EAS_3mer_counts, gw.3mer)
chi.bycluster(data = counts.JPT.5mer, gw = gw.5mer,dr = dr.5.JPT3mers, k = 2, n = 2, exclude = c())
chi.bycluster(data = counts.JPT.5mer, gw = gw.5mer,dr = dr.5.JPT3mers, k = 3, n = 2, exclude = c())
chi.bysubset(data = counts.JPT.3mer, gw = gw.3mer, muts = JPT3mers)
chi.bycluster(data = counts.JPT.7mer, gw = gw.7mer,dr = dr.7.JPT3mers, k = 6, n = 2, exclude = c())
chi.bycluster(data = counts.JPT.7mer, gw = gw.7mer,dr = dr.7.JPT3mers, k = 6, n = 2, exclude = c("CAAACCC->C", "CCCACAG->C", "AAATAAA->A"))
chi.bycluster(data = counts.JPT.7mer, gw = gw.7mer,dr = dr.7.JPT3mers, k = 6, n = 2, exclude = c("CAAACCC->C", "CCCACAG->C"))
chi.bycluster(data = counts.JPT.7mer, gw = gw.7mer,dr = dr.7.JPT3mers, k = 6, n = 2, exclude = c("CAAACCC->C", "CCCACAG->C", "AAATAAA->A"))
chi.bycluster(data = counts.JPT.7mer, gw = gw.7mer,dr = dr.7.JPT3mers, k = 6, n = 2)
chi.bycluster(data = counts.JPT.7mer, gw = gw.7mer,dr = dr.7.JPT5mers, k = 3, n = 1)
chi.bycluster(data = counts.JPT.7mer, gw = gw.7mer,dr = dr.7.JPT5mers, k = 3, n = 1,
exclude = c("CAAACCC->C", "CCCACAG->C", "AAATAAA->A"))
chi.bycluster(data = counts.JPT.7mer, gw = gw.7mer,dr = dr.7.JPT5mers, k = 3, n = 2)
chi.bycluster(data = counts.JPT.7mer, gw = gw.7mer,dr = dr.7.JPT5mers, k = 3, n = 3)
chi.bycluster(data = counts.JPT.7mer, gw = gw.7mer,dr = dr.7.JPT5mers, k = 3, n = 2)
chi.bycluster(data = counts.JPT.7mer, gw = gw.7mer,dr = dr.7.JPT5mers, k = 3, n = 1,
exclude = c("CAAACCC->C", "CCCACAG->C", "AAATAAA->A"))
chi.bysubset(AFR_3mer_counts, gw.3mer)
chi.bysubset(EUR_3mer_counts, gw.3mer)
chi.bysubset(SAS_3mer_counts, gw.3mer)
chi.bysubset(EAS_3mer_counts, gw.3mer)
chi.bycluster(data = counts.JPT.3mer, gw = gw.3mer,dr = dr.3mer.EASonly, k = 2, n = 2, exclude = c())
chi.bycluster(data = counts.JPT.5mer, gw = gw.5mer,dr = dr.5.JPT3mers, k = 3, n = 2, exclude = c())
chi.bycluster(data = counts.JPT.7mer, gw = gw.7mer,dr = dr.7.JPT3mers, k = 6, n = 2)
chi.bycluster(data = counts.JPT.7mer, gw = gw.7mer,dr = dr.7.JPT3mers, k = 6, n = 2,
exclude = c("CAAACCC->C", "CCCACAG->C", "AAATAAA->A"))
chi.bycluster(data = counts.JPT.7mer, gw = gw.7mer,dr = dr.7.JPT5mers, k = 3, n = 2)
chi.bycluster(data = counts.JPT.7mer, gw = gw.7mer,dr = dr.7.JPT5mers, k = 3, n = 1,
exclude = c("CAAACCC->C", "CCCACAG->C", "AAATAAA->A"))
chi.bycluster(data = counts.JPT.7mer, gw = gw.7mer,dr = dr.7.JPT5mers, k = 3, n = 2)
chi.bycluster(data = counts.JPT.7mer, gw = gw.7mer,dr = dr.7.JPT5mers, k = 3, n = 1,
exclude = c("CAAACCC->C", "CCCACAG->C", "AAATAAA->A"))
source('C:/Users/VoightLab/Dropbox/SNP_rates/Code/subrate_scatterplot.R')
pairwise_scatterplot(EAS_7mer_counts, AFR_7mer_counts, "AAC->C")
source('C:/Users/VoightLab/Dropbox/SNP_rates/Code/subrate_scatterplot.R')
pairwise_scatterplot(EAS_7mer_counts, AFR_7mer_counts, "AAC->C")
KHV_EAS_7mer_counts   <- read_delim("KHV_EAS_7mer_counts.txt", "\t", escape_double = FALSE, trim_ws = TRUE)
library(readr)
KHV_EAS_7mer_counts   <- read_delim("KHV_EAS_7mer_counts.txt", "\t", escape_double = FALSE, trim_ws = TRUE)
setwd("C:/Users/VoightLab/Dropbox/SNP_rates/Raw_Data/singletons_excluded/subpops/7mer/")
KHV_EAS_7mer_counts   <- read_delim("KHV_EAS_7mer_counts.txt", "\t", escape_double = FALSE, trim_ws = TRUE)
pairwise_scatterplot(counts.JPTCHBCHS.7mer, KHV_EAS_7mer_counts, "AAC->C")
CHB_EAS_7mer_counts <- read_delim("CHB_EAS_7mer_counts.txt", "\t", escape_double = FALSE, trim_ws = TRUE)
JPT_EAS_7mer_counts <- read_delim("JPT_EAS_7mer_counts.txt", "\t", escape_double = FALSE, trim_ws = TRUE)
CHS_EAS_7mer_counts <- read_delim("CHS_EAS_7mer_counts.txt", "\t", escape_double = FALSE, trim_ws = TRUE)
CDX_EAS_7mer_counts <- read_delim("CDX_EAS_7mer_counts.txt", "\t", escape_double = FALSE, trim_ws = TRUE)
KHV_EAS_7mer_counts   <- read_delim("KHV_EAS_7mer_counts.txt", "\t", escape_double = FALSE, trim_ws = TRUE)
source('C:/Users/VoightLab/Dropbox/SNP_rates/Code/subrate_scatterplot.R')
line.subcontext(JPT_EAS_7mer_counts, CHS_EAS_7mer_counts, CHB_EAS_7mer_counts, KHV_EAS_7mer_counts, "AAC->C")
line.subcontext(JPT_EAS_5mer_counts, CHS_EAS_5mer_counts, CHB_EAS_5mer_counts, KHV_EAS_5mer_counts, "AAC->C")
setwd("C:/Users/VoightLab/Dropbox/SNP_rates/Raw_Data/singletons_excluded/subpops/5mer/")
CHB_EAS_5mer_counts <- read_delim("CHB_EAS_5mer_counts.txt", "\t", escape_double = FALSE, trim_ws = TRUE)
JPT_EAS_5mer_counts <- read_delim("JPT_EAS_5mer_counts.txt", "\t", escape_double = FALSE, trim_ws = TRUE)
CHS_EAS_5mer_counts <- read_delim("CHS_EAS_5mer_counts.txt", "\t", escape_double = FALSE, trim_ws = TRUE)
CDX_EAS_5mer_counts <- read_delim("CDX_EAS_5mer_counts.txt", "\t", escape_double = FALSE, trim_ws = TRUE)
KHV_EAS_5mer_counts   <- read_delim("KHV_EAS_5mer_counts.txt", "\t", escape_double = FALSE, trim_ws = TRUE)
line.subcontext(JPT_EAS_5mer_counts, CHS_EAS_5mer_counts, CHB_EAS_5mer_counts, KHV_EAS_5mer_counts, "AAC->C")
line.subcontext.7mer(JPT_EAS_7mer_counts, CHS_EAS_7mer_counts, CHB_EAS_7mer_counts, KHV_EAS_7mer_counts, "AAACC->C")
line.subcontext.7mer(JPT_EAS_7mer_counts, CHS_EAS_7mer_counts, CHB_EAS_7mer_counts, KHV_EAS_7mer_counts, "AAACAAA->A")
line.subcontext.7mer(JPT_EAS_7mer_counts, CHS_EAS_7mer_counts, CHB_EAS_7mer_counts, KHV_EAS_7mer_counts, "AACAA->A")
line.subcontext.7mer(JPT_EAS_7mer_counts, CHS_EAS_7mer_counts, CHB_EAS_7mer_counts, KHV_EAS_7mer_counts, "AATAA->A")
line.subcontext.7mer(JPT_EAS_7mer_counts, CHS_EAS_7mer_counts, CHB_EAS_7mer_counts, KHV_EAS_7mer_counts, "AAGAA->A")
sum(EUR_3mer_counts$Count)/(sum(EUR_3mer_counts$context_in_genome)/3)
sum(EUR_3mer_counts$Count)
(sum(EUR_3mer_counts$context_in_genome)/3)
sum(EUR_3mer_counts$context_in_genome)
EUR_3mer_counts$context_in_genome
EUR_3mer_counts$context_in_genome + 1
sum(EUR_3mer_counts$context_in_genome)
mean(EUR_3mer_counts$context_in_genome)
sum(EUR_3mer_counts$Count)/(sum(as.numeric(EUR_3mer_counts$context_in_genome))/3)
p <- sum(EUR_3mer_counts$Count)/(sum(as.numeric(EUR_3mer_counts$context_in_genome))/3)
n <- (sum(as.numeric(EUR_3mer_counts$context_in_genome))/3)
n
n*p*(1-p)
np
n*p
p(1-p)/n
p*(1-p)/n
