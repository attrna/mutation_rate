o.sig.7mer <- o.sig.7mer[order(o.sig.7mer$p),]
# number of significant polymorphism types
o.ns.7 <- length(o.sig.7mer$Context)
# filter types from known 3mer signals
o.new.7mers <- subset(o.sig.7mer, !is.element(o.sig.7mer$X3mer, c(EUR.signal, new.signal)))
# count number of hits left over
o.nn.7 <- length(o.new.7mers$Context)
# plot significant 7mers and print most signif. new results
sigs.plot(o.p.7mer, 1e-10, NoGGA = T)
kable(head(o.new.7mers[,-c(2,3,4)], 10), digits = 600, row.names = F,
caption = "10 most significant new 7mers using ordered p value correction")
# qqplot
qq.labels(o.p.7mer, 1e-10, NoGGA = T)
# fdr analysis for 7mers
a <- fdr(o.p.7mer)
o.fdr.7mer <- a[2]
o.sig.7mer <- a[1];o.sig.7mer
sum(is.element(o.p.5mer$Context,c("GGA->A", "ACC->T", "AGA->A") )
)
sum(is.element(o.p.5mer$X3mer,c("GGA->A", "ACC->T", "AGA->A") )
)
sum(is.element(o.p.5mer$X3mer,c("ATC->A", "ACC->A") )
)
sum(is.element(o.p.5mer$X3mer,c("ACA->T")))
32+16
3*16
library(readr)
library(knitr)
library(ggplot2)
library(dplyr)
require(reshape2)
library(gridExtra)
library(grid)
setwd("C:/Users/VoightLab/Dropbox/SNP_rates/Raw_Data/singletons_excluded/")
AFR_7mer_counts <- read_delim("7mer/AFR_7mer_counts.txt",
"\t", escape_double = FALSE, trim_ws = TRUE)
EUR_7mer_counts <- read_delim("7mer/EUR_7mer_counts.txt",
"\t", escape_double = FALSE, trim_ws = TRUE)
EAS_7mer_counts <- read_delim("7mer/EAS_7mer_counts.txt",
"\t", escape_double = FALSE, trim_ws = TRUE)
SAS_7mer_counts <- read_delim("7mer/SAS_7mer_counts.txt",
"\t", escape_double = FALSE, trim_ws = TRUE)
setwd("C:/Users/VoightLab/Dropbox/SNP_rates/Raw_Data/singletons_excluded/")
AFR_5mer_counts <- read_delim("5mer/AFR_5mer_counts.txt",
"\t", escape_double = FALSE, trim_ws = TRUE)
EUR_5mer_counts <- read_delim("5mer/EUR_5mer_counts.txt",
"\t", escape_double = FALSE, trim_ws = TRUE)
EAS_5mer_counts <- read_delim("5mer/EAS_5mer_counts.txt",
"\t", escape_double = FALSE, trim_ws = TRUE)
SAS_5mer_counts <- read_delim("5mer/SAS_5mer_counts.txt",
"\t", escape_double = FALSE, trim_ws = TRUE)
setwd("C:/Users/VoightLab/Dropbox/SNP_rates/Raw_Data/singletons_excluded/")
AFR_3mer_counts <- read_delim("3mer/AFR_3mer_counts.txt",
"\t", escape_double = FALSE, trim_ws = TRUE)
EUR_3mer_counts <- read_delim("3mer/EUR_3mer_counts.txt",
"\t", escape_double = FALSE, trim_ws = TRUE)
EAS_3mer_counts <- read_delim("3mer/EAS_3mer_counts.txt",
"\t", escape_double = FALSE, trim_ws = TRUE)
SAS_3mer_counts <- read_delim("3mer/SAS_3mer_counts.txt",
"\t", escape_double = FALSE, trim_ws = TRUE)
setwd("C:/Users/VoightLab/Dropbox/SNP_rates/Raw_Data/gw_counts/")
gw_5mer_counts <- read_delim("gw_5mer_counts.txt",
"\t", escape_double = FALSE, trim_ws = TRUE)
gw_3mer_counts <- read_delim("gw_3mer_counts.txt",
"\t", escape_double = FALSE, trim_ws = TRUE)
gw_7mer_counts <- read_delim("gw_7mer_counts.txt",
"\t", escape_double = FALSE, trim_ws = TRUE)
CI.plot <- function(AFR, EUR, EAS, SAS, mut) {
mut.i <- which(AFR$Context == mut)
popnames <- c("Africa","Europe", "South\nAsia", "East\nAsia")
colors <- c("forestgreen", "darkblue", "magenta","red")
#have to do a silly workaround or R will sort popnames alphanumerically
poplabs <- factor(popnames, levels= popnames)
#cycle through pops and get counts for mut
counts <- rep(0, 4)
sums <- rep(0, 4)
pops <- list(AFR, EUR, SAS, EAS)
for (i in 1:length(pops)){
counts[i] <- pops[[i]]$Count[mut.i]
sums[i]<- sum(pops[[i]]$Count)
}
#estimate substitution probability
N.c <- AFR$context_in_genome[mut.i]
theta <- counts/N.c
L <- theta - 1.96*sqrt(theta*(1-theta)/N.c)
U <- theta + 1.96*sqrt(theta*(1-theta)/N.c)
#normalize to rate estimate; assume genome wide subsitution probability is measured without error
norm <- 1.2E-8*(sum(as.numeric(AFR$context_in_genome))/3)/sums
df <- data.frame(cbind(popnames, theta*norm, L*norm, U*norm))
plotcol <- reorder(colors, theta*norm)
CI.plot <- ggplot(df, aes(reorder(popnames, c(1,2,3,4)), theta*norm)) +
geom_point(size = 4, color = plotcol) +
geom_errorbar(aes(ymax = U*norm, ymin = L*norm), color = plotcol, size =1)+
labs(title = paste("Estimated mutation\nrate of", mut), y = NULL) + #y axis label
theme(axis.text.x = element_text(size = rel(.9)), axis.title.x = element_blank(), #adjust text sizes
axis.title.y = element_text(size = rel(.9)), axis.text.y = element_text(size = rel(.9), angle = 0, hjust = 0.5), title = element_text(size = rel(.7)),
legend.position = 'none')
return(CI.plot)
}
#box plot of rate by chrom for a particular sequence context
chrom.box <- function(AFR, EUR, EAS, SAS, gw, mut){
#get data
chrom.dat <- chrom.process.data(AFR, EUR, EAS, SAS, gw, mut)
#find outliers; THIS DOESN'T WORK :(
AFR.rates <- subset(chrom.dat, chrom.dat$pop == "Africa")
AFR.outliers <- subset(AFR.rates, is_outlier(AFR.rates$rate)==TRUE)
EUR.rates <- subset(chrom.dat, chrom.dat$pop == "Europe")
EUR.outliers <- subset(EUR.rates, is_outlier(EUR.rates$rate)==TRUE)
EAS.rates <- subset(chrom.dat, chrom.dat$pop == "East\nAsia")
EAS.outliers <- subset(EAS.rates, is_outlier(EAS.rates$rate)==TRUE)
SAS.rates <- subset(chrom.dat, chrom.dat$pop == "South\nAsia")
SAS.outliers <- subset(SAS.rates, is_outlier(SAS.rates$rate)==TRUE)
#plot
c_plot <- ggplot(chrom.dat, aes(pop, rate))+
geom_boxplot(outlier.color = NA, fill = c("palegreen1",  "steelblue1", 'plum1', "lightcoral"))+
labs(x = "\nPopulation", title = paste("Mutation rate of", mut,"\nby chromosome"), y = NULL)+
scale_color_manual("", values = c("forest green", "dark blue", 'magenta', "red"))+
#add outlier labels
geom_text(data = EUR.outliers, aes(pop, rate, label = chrom), color = "dark blue", nudge_x = 0.1)+
geom_text(data = AFR.outliers, aes(pop, rate, label = chrom), color = "forest green", nudge_x = 0.1)+
geom_text(data = EAS.outliers, aes(pop, rate, label = chrom), color = "red", nudge_x = 0.1)+
geom_text(data = SAS.outliers, aes(pop, rate, label = chrom), color = "magenta", nudge_x = 0.1)+
#add points
geom_point(aes(color = factor(chrom.dat$pop)), size = 1.2, position = position_jitter(width = 0.1))+
theme(axis.text.x = element_text(size = rel(.9)), axis.title.x = element_blank(), #adjust text sizes
axis.title.y = element_text(size = rel(.9)), axis.text.y = element_text(size = rel(.9)),
legend.position = 'none',
title = element_text(size = rel(.7)))#legend position
return(c_plot)
}
#helper function for ploting which formats the data for ggplot
chrom.process.data <- function(AFR, EUR, EAS, SAS, gw, mut){
#get indicies for mutation and contextAFR, EUR, EAS, SAS, gw, mut
i <- which(EUR$Context == mut)
cntxt <- substr(mut, 1, nchar(mut)-3)
i.cntxt <- which(gw$Context == cntxt)
col.e <- ncol(AFR)
col.s <- col.e-22
#trim summary columns from each input dataframe
AFR <- AFR[c(col.s: col.e)]
EUR <- EUR[c(col.s: col.e)]
EAS <- EAS[c(col.s: col.e)]
SAS <- SAS[c(col.s: col.e)]
gw <- gw[-c(1,2)]
gw_totals <- colSums(gw)
#make output dataframe for plot
dat <- data.frame(matrix(nrow = 23, ncol = 4))
colnames(dat) <- c("Africa", "Europe", "South\nAsia", "East\nAsia")
#get rates for each pop
dat$'Europe' <- t(EUR[i,]/gw[i.cntxt,]*1.2E-8*gw_totals/colSums(EUR))
dat$'Africa' <- t(AFR[i,]/gw[i.cntxt,]*1.2E-8*gw_totals/colSums(AFR))
dat$'East\nAsia' <- t(EAS[i,]/gw[i.cntxt,]*1.2E-8*gw_totals/colSums(EAS))
dat$'South\nAsia' <- t(SAS[i,]/gw[i.cntxt,]*1.2E-8*gw_totals/colSums(SAS))
#melt data to necessary format
row.names(dat) <- c('1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '21', '22', 'X')
dat.m <- melt(t(dat))
colnames(dat.m) <- c("pop", "chrom", "rate")
return(dat.m)
}
#helper function that returns which elements of a vector x are outliers
is_outlier <- function(x) {
return(x < quantile(x, 0.25) - 1.5 * IQR(x) | x > quantile(x, 0.75) + 1.5 * IQR(x))
}
setwd("C:/Users/VoightLab/Dropbox/SNP_rates/Analyses/chi_squared_tests/results/ordered_p")
sig.3mers <- read_delim("o_significant_3mers.txt",
delim ="\t", escape_double = F, trim_ws = T)
sig.5mers <- read_delim("o_significant_new_5mers.txt",
delim ="\t", escape_double = F, trim_ws = T)
sig.7mers <- read_delim("o_significant_new_5mers.txt",
delim ="\t", escape_double = F, trim_ws = T)
length(sig.3mers$p)
o.sig.3mer
setwd('C:/Users/VoightLab/Dropbox/SNP_rates/Analyses/chi_squared_tests/results')
p.3mer <- p.3mer[order(p.3mer$p),]
sig.3mers <- subset(p.3mer, p.3mer$p < 0.05/96)
o.p.3mer <- o.p.3mer[order(p.3mer$p),]
o.sig.3mers <- subset(o.p.3mer, o.p.3mer$p < 0.05/96)
write.table(o.sig.3mers, "o_significant_3mers.txt", quote = F, sep = "\t", row.names = F)
write.table(sig.3mers, "significant_3mers.txt", quote = F, sep = "\t", row.names = F)
sig.3mers
sig.5mers
o.p.5mer <- ordered.p(p.5mer)
alpha <- 0.05/length(o.p.5mer$Context)
o.sig.5mer <- subset(o.p.5mer, o.p.5mer$p < alpha)
o.sig.5mer <- o.sig.5mer[order(o.sig.5mer$p),]
o.sig.5mer
length(o.sig.5mer$p)
sum(is.element(o.sig.5mer$X3mer, c("GGA->A", "ACC->T", "AGA->A")))
sum(is.element(o.sig.5mer$X3mer, c("GGA->A")))
sum(is.element(o.sig.5mer$X3mer, c("GGA->A", "ACC->T", "AGA->A")))
sum(is.element(o.sig.5mer$X3mer, c("ACC->T")))
sum(is.element(o.sig.5mer$X3mer, c("AGA->A")))
sum(is.element(o.sig.5mer$X3mer, c("ACA->T")))
sum(is.element(o.sig.5mer$X3mer, c("ATC->A")))
sum(is.element(o.sig.5mer$X3mer, c("ACC->A")))
10+8+6
sum(is.element(o.sig.5mer$X3mer, c("AAC->C")))
sum(is.element(o.sig.5mer$X3mer, c("GAC->C")))
sum(is.element(o.sig.5mer$X3mer, c("CAC->C")))
sum(is.element(o.sig.5mer$X3mer, c("CTG->G")))
sum(is.element(o.sig.5mer$X3mer, c("GAC->C")))
sum(is.element(o.sig.5mer$X3mer, c("GTA->G")))
source('C:/Users/VoightLab/Dropbox/SNP_rates/Code/data_wrangling/upload_subpops.R')
source('C:/Users/VoightLab/Dropbox/SNP_rates/Code/archive/regression_plot.R')
source('C:/Users/VoightLab/Dropbox/SNP_rates/Code/archive/regression_plot.R')
source('C:/Users/VoightLab/Dropbox/SNP_rates/Code/subrate_scatterplot.R')
pairwise_scatterplot(JPT_EAS_7mer_counts, KHV_EAS_7mer_counts, "AAC->C")
hist(subset(JPT_EAS_7mer_counts$Rate, JPT_EAS_7mer_counts$X3mer == "AAC->C"))
hist(subset(JPT_EAS_7mer_counts$Rate, JPT_EAS_7mer_counts$X3mer == "ACG->T"))
hist(subset(JPT_EAS_7mer_counts$Rate, JPT_EAS_7mer_counts$X3mer == "ACA->T"))
hist(subset(JPT_EAS_7mer_counts$Rate, JPT_EAS_7mer_counts$X3mer == "AAC->C"))
hist(subset(JPT_EAS_7mer_counts$Rate, JPT_EAS_7mer_counts$X3mer == "AAT->C"))
hist(subset(JPT_EAS_7mer_counts$Rate, JPT_EAS_7mer_counts$X3mer == "CAT->C"))
hist(subset(JPT_EAS_7mer_counts$Rate, JPT_EAS_7mer_counts$X3mer == "CAG->C"))
hist(subset(JPT_EAS_7mer_counts$Rate, JPT_EAS_7mer_counts$X3mer == "AAC->C"))
JPTAAC <- subset(JPT_EAS_7mer_counts$Rate, JPT_EAS_7mer_counts$X3mer == "AAC->C")
KHVAAC <- subset(KHV_EAS_7mer_counts$Rate, KHV_EAS_7mer_counts$X3mer == "AAC->C")
hist(JPTAAC/KHVAAC)
hist(JPTAAC/KHVAAC, breaks = 20)
view(JPTAAC/KHVAAC  )
JPTAAC/KHVAAC
JPTvKHV <- JPTAAC/KHVAAC
names(JPTvKHV) <- subset(JPT_EAS_7mer_counts$Context, JPT_EAS_7mer_counts$X3mer == "AAC->C")
JPTvKHV
subset(JPTvKHV > 6)
subset(JPTvKHV, JPTvKHV > 6)
subset(JPTvKHV, JPTvKHV > 5)
subset(JPTvKHV, JPTvKHV > 4)
source('C:/Users/VoightLab/Dropbox/SNP_rates/Code/subrate_scatterplot.R')
pairwise_scatterplot(JPT_EAS_7mer_counts, KHV_EAS_7mer_counts, "AAC->C")
source('C:/Users/VoightLab/Dropbox/SNP_rates/Code/subrate_scatterplot.R')
pairwise_scatterplot(JPT_EAS_7mer_counts, KHV_EAS_7mer_counts, "AAC->C")
source('C:/Users/VoightLab/Dropbox/SNP_rates/Code/subrate_scatterplot.R')
pairwise_scatterplot(JPT_EAS_7mer_counts, KHV_EAS_7mer_counts, "AAC->C")
source('C:/Users/VoightLab/Dropbox/SNP_rates/Code/subrate_scatterplot.R')
pairwise_scatterplot(JPT_EAS_7mer_counts, KHV_EAS_7mer_counts, "AAC->C")
count1 <- JPT_EAS_7mer_counts
count2 <- KHV_EAS_7mer_counts
mut <- "AAC->C"
pop1.mut <- subset(count1, count1$X3mer == mut)
pop2.mut <- subset(count2, count2$X3mer == mut)
dat <- cbind(pop1.mut$Context, pop1.mut$Rate, pop2.mut$Rate)
sample.size <- pop1.mut$Count + pop2.mut$Count
label <- subset(data, pop1.mut$Rate/pop2.mut > 4 || pop1.mut$Rate/pop2.mut < 0.25)
label <- dat[complete.cases(pop1.mut$Rate/pop2.mut),]
label <- dat[!is.na(pop1.mut$Rate/pop2.mut),]
!is.na(pop1.mut$Rate/pop2.mut)
!is.na(pop1.mut$Rate/pop2.mut$Rate)
label <- dat[!complete.cases(pop1.mut$Rate/pop2.mut$Rate),]
label
dat <- data.frame(cbind(pop1.mut$Context, pop1.mut$Rate, pop2.mut$Rate))
dat
sample.size <- pop1.mut$Count + pop2.mut$Count
label <- dat[!complete.cases(pop1.mut$Rate/pop2.mut$Rate),]
label
label <- dat[complete.cases(pop1.mut$Rate/pop2.mut$Rate),]
label
label <- subset(data, pop1.mut$Rate/pop2.mut > 4 || pop1.mut$Rate/pop2.mut < 0.25)
label <- subset(data, pop1.mut$Rate/pop2.mut$Rate > 4 || pop1.mut$Rate/pop2.mut$Rate < 0.25)
label
pop1.mut$Rate/pop2.mut$Rate > 4 || pop1.mut$Rate/pop2.mut$Rate < 0.25
pop1.mut$Rate/pop2.mut$Rate > 4 | pop1.mut$Rate/pop2.mut$Rate < 0.25
label <- subset(data, pop1.mut$Rate/pop2.mut$Rate > 4 | pop1.mut$Rate/pop2.mut$Rate < 0.25)
label
data
label <- subset(dat, pop1.mut$Rate/pop2.mut$Rate > 4 | pop1.mut$Rate/pop2.mut$Rate < 0.25)
label
length(label[1,])
length(label[,1])
source('C:/Users/VoightLab/Dropbox/SNP_rates/Code/subrate_scatterplot.R')
pairwise_scatterplot(JPT_EAS_7mer_counts, KHV_EAS_7mer_counts, "AAC->C")
source('C:/Users/VoightLab/Dropbox/SNP_rates/Code/subrate_scatterplot.R')
pairwise_scatterplot(JPT_EAS_7mer_counts, KHV_EAS_7mer_counts, "AAC->C")
source('C:/Users/VoightLab/Dropbox/SNP_rates/Code/subrate_scatterplot.R')
pairwise_scatterplot(JPT_EAS_7mer_counts, KHV_EAS_7mer_counts, "AAC->C")
as.numeric(label[,2])
label[,2]
as.vector(label[,2])
as.numeric(as.vector(label[,2]))
source('C:/Users/VoightLab/Dropbox/SNP_rates/Code/subrate_scatterplot.R')
pairwise_scatterplot(JPT_EAS_7mer_counts, KHV_EAS_7mer_counts, "AAC->C")
source('C:/Users/VoightLab/Dropbox/SNP_rates/Code/subrate_scatterplot.R')
pairwise_scatterplot(JPT_EAS_7mer_counts, KHV_EAS_7mer_counts, "AAC->C")
count1 <- JPT_EAS_7mer_counts
count2 <- KHV_EAS_7mer_counts
mut <- "AAC->C"
pop1.mut <- subset(count1, count1$X3mer == mut)
pop2.mut <- subset(count2, count2$X3mer == mut)
dat <- data.frame(cbind(pop1.mut$Context, pop1.mut$Rate, pop2.mut$Rate))
sample.size <- pop1.mut$Count + pop2.mut$Count
label <- subset(dat, pop1.mut$Rate/pop2.mut$Rate > 4 | pop1.mut$Rate/pop2.mut$Rate < 0.25)
label
p_plot <- qplot(pop1.mut$Rate, pop2.mut$Rate, xlim = c(0, 1.2e-8), ylim = c(0, 1.2e-8)) +
labs(x = "Rate in Pop 1", y = "Rate in Pop 2") +
theme(legend.title = element_blank(),
legend.justification= c(1,0),
legend.position=c(1,0),
axis.text=element_text(size=10),
text = element_text(size = 17))+
geom_point(aes(colour = log(base = 10, x = sample.size)), size = 3) +
scale_colour_gradient(low = "orange", high = "blue") +
geom_abline(aes(intercept=0,slope=1,show.legend = FALSE), size = 1)+
geom_text(data = label, aes(as.numeric(as.vector(label$X2)), as.numeric(as.vector(label$X3)),
label = as.vector(label$X1)),
hjust = 0, nudge_x = 2, nudge_y = .5, size = 2.5, check_overlap = TRUE)
return(p_plot)
pairwise_scatterplot <- function(count1, count2, mut){
pop1.mut <- subset(count1, count1$X3mer == mut)
pop2.mut <- subset(count2, count2$X3mer == mut)
dat <- data.frame(cbind(pop1.mut$Context, pop1.mut$Rate, pop2.mut$Rate))
sample.size <- pop1.mut$Count + pop2.mut$Count
label <- subset(dat, pop1.mut$Rate/pop2.mut$Rate > 4 | pop1.mut$Rate/pop2.mut$Rate < 0.25)
#m <- EUR.GGA.rate/AFR.GGA.rate
#b <- mean(pop2.mut$Rate) - m*mean(pop1.mut$Rate)
p_plot <- qplot(pop1.mut$Rate, pop2.mut$Rate, xlim = c(0, 1.2e-8), ylim = c(0, 1.2e-8)) +
labs(x = "Rate in Pop 1", y = "Rate in Pop 2") +
theme(legend.title = element_blank(),
legend.justification= c(1,0),
legend.position=c(1,0),
axis.text=element_text(size=10),
text = element_text(size = 17))+
geom_point(aes(colour = log(base = 10, x = sample.size)), size = 3) +
scale_colour_gradient(low = "orange", high = "blue") +
geom_abline(aes(intercept=0,slope=1,show.legend = FALSE), size = 1)+
geom_text(data = label, aes(as.numeric(as.vector(label$X2)), as.numeric(as.vector(label$X3)),
label = as.vector(label$X1)),
hjust = 0, nudge_x = 2, nudge_y = .5, size = 2.5, check_overlap = TRUE)
# geom_abline(aes(intercept=b,slope=m,show.legend = FALSE))
return(p_plot)
}
p.plot
p_plot
label$X2
as.vector(label$X2)
as.numeric(as.vector(label$X2))
p_plot <- qplot(pop1.mut$Rate, pop2.mut$Rate, xlim = c(0, 1.2e-8), ylim = c(0, 1.2e-8)) +
labs(x = "Rate in Pop 1", y = "Rate in Pop 2") +
theme(legend.title = element_blank(),
legend.justification= c(1,0),
legend.position=c(1,0),
axis.text=element_text(size=10),
text = element_text(size = 17))+
geom_point(aes(colour = log(base = 10, x = sample.size)), size = 3) +
scale_colour_gradient(low = "orange", high = "blue") +
geom_abline(aes(intercept=0,slope=1,show.legend = FALSE), size = 1)+
geom_text(data = label, aes(as.numeric(as.vector(X2)), as.numeric(as.vector(X3)),
label = as.vector(X1)),
hjust = 0, nudge_x = 2, nudge_y = .5, size = 2.5, check_overlap = TRUE)
p_plot
source('C:/Users/VoightLab/Dropbox/SNP_rates/Code/subrate_scatterplot.R')
pairwise_scatterplot(JPT_EAS_7mer_counts, KHV_EAS_7mer_counts, "AAC->C")
which(sig.3mer$Context == "TAA->T")
sig.3mer
sig.3mers
which(sig.3mers$Context == "TAA->A")
View(sig.3mer)
View(sig.3mers)
which(sig.3mers$Context == "TAA->T")
which(o.sig.3mers$Context == "TAA->T")
View(o.sig.3mers)
length(o.sig.3mer)
length(o.sig.3mers$Context)
p.3mer <- p.3mer[order(p.3mer$p),]
sig.3mers <- subset(p.3mer, p.3mer$p < 0.05/96)
View(sig.3mer)
View(sig.3mers)
which(sig.3mers$Context == "TAA->A")
which(sig.3mers$Context == "TAA->T")
o.p.3mer <- o.p.3mer[order(p.3mer$p),]
o.sig.3mers <- subset(o.p.3mer, o.p.3mer$p < 0.05/96)
View(o.sig.3mers)
o.p.3mer <- o.p.3mer[order(o.p.3mer$p),]
o.sig.3mers <- subset(o.p.3mer, o.p.3mer$p < 0.05/96)
View(o.sig.3mers)
which(o.sig.3mers$Context = "TAA->A")
which(o.sig.3mers$Context == "TAA->A")
which(o.sig.3mers$Context == "TAA->T")
get.5mer.subcontext.data <- function(rates, muts, labels){
# take subset with 5mer subcontexts in muts
data <- subset(rates, is.element(labels$X5mer, muts))
complete <- apply(data, 1, function(row) all(row != 0) & all(!is.na(row)))
data <- data[complete,]
return(data)
}
get.3mer.subcontext.data <- function(rates, muts, labels){
# take subset with 3mer subcontexts in muts
data <- subset(rates, is.element(labels$X3mer, muts))
complete <- apply(data, 1, function(row) all(row != 0) & all(!is.na(row)))
data <- data[complete,]
return(data)
}
knitr::opts_knit$set(root.dir = "C:/Users/VoightLab/Dropbox/SNP_rates/Analyses/clustering/data")
# import libraries we need
library(knitr)
library(ggplot2)
library(gplots)
library(stats)
library(readr)
# load data
rates.3mer <- as.matrix(read.delim("rates_3mer.txt"))
rates.5mer <- as.matrix(read.delim("rates_5mer.txt"))
rates.7mer <- as.matrix(read.delim("rates_7mer.txt"))
labels.3mer <- read.delim("3mer_mutations_ref")
labels.5mer <- read.delim("5mer_mutations_ref")
labels.7mer <- read.delim("7mer_mutations_ref")
subpops.names <- c("TSI", "IBS", "CEU", "GBR", "FIN", "STU", "ITU", "BEB", "GIH", "PJL",
"ESN", "GWD", "LWK", "MSL", "YRI", "CDX", "CHB", "CHS", "JPT", "KHV")
# helper function that normalizes a vector by z or L1 method
norm <- function(vec, method = c("z", "L1", "fdiff")){
if (method == "L1"){ # normalize so vector sums to 1
u <- vec/sum(abs(vec))}
else if (method == "z"){ # normalize to mean 0, variance 1
u <- (vec - mean(vec))/sd(vec)}
else # normalize to fold change compared to mean
u <- vec/mean(vec)
return(u)
}
# normalizes a whole dataset by calling norm on each row
norm.byrow <- function(mat, m){
data <- t(apply(mat,1,norm, method = m))
return(data)
}
norm.3mer.rates <- norm.byrow(rates.3mer, "fdiff")
norm.5mer.rates <- norm.byrow(rates.5mer, "fdiff")
norm.7mer.rates <- norm.byrow(rates.7mer, "fdiff")
get.5mer.subcontext.data <- function(rates, muts, labels){
# take subset with 5mer subcontexts in muts
data <- subset(rates, is.element(labels$X5mer, muts))
complete <- apply(data, 1, function(row) all(row != 0) & all(!is.na(row)))
data <- data[complete,]
return(data)
}
get.3mer.subcontext.data <- function(rates, muts, labels){
# take subset with 3mer subcontexts in muts
data <- subset(rates, is.element(labels$X3mer, muts))
complete <- apply(data, 1, function(row) all(row != 0) & all(!is.na(row)))
data <- data[complete,]
return(data)
}
# makes a heatmap of a matrix and returns the row dendrogram as an object
make.heatmap <- function(data, logunits = T){
complete <- apply(data, 1, function(row) all(row != 0) & all(!is.na(row)))
data <- data[complete,]
if (logunits == T) {
data <- log2(data)
}
dr <- hclust(dist(data))
dc <- hclust(dist(t(data)))
heatmap.2(data, Rowv = as.dendrogram(dr), Colv = as.dendrogram(dc),
trace = 'none', col=colorRampPalette(c('blue', "white", 'red'))(n = 1000),
density.info = 'none', key.xlab = "fold differece vs. mean\n(log base 2 scale)",
key.title = NA, keysize = 0.5,
lhei = c(1,5.5), lwid = c(1,4))
return(dr)
}
# makes a heatmap of all kmers with a certain set of 3mer or 5mer subcontexts
subcontext.heatmap <- function(rates, muts, labels, logunits = T){
if (nchar(muts[1]) == 6){
data <- get.3mer.subcontext.data(rates, muts, labels)
} else data <- get.5mer.subcontext.data(rates, muts, labels)
return(make.heatmap(data, logunits))
}
dr.3.all <- make.heatmap(norm.3mer.rates)
dr.5.GGA <- subcontext.heatmap(norm.5mer.rates, c("GGA->A"), labels.5mer)
subcontext.heatmap(norm.5mer.rates, c("GGA->A"), labels.5mer)
subcontext.heatmap(norm.5mer.rates, c("TAA->T"), labels.5mer)
subcontext.heatmap(norm.7mer.rates, c("TAA->T"), labels.7mer)
CI.plot(AFR_5mer_counts, EUR_5mer_counts, EAS_5mer_counts, SAS_5mer_counts, "TTAAA->T")
CI.plot(AFR_3mer_counts, EUR_3mer_counts, EAS_3mer_counts, SAS_3mer_counts, "TAA->T")
CI.plot(AFR_5mer_counts, EUR_5mer_counts, EAS_5mer_counts, SAS_5mer_counts, "CTAAA->T")
CI.plot(AFR_5mer_counts, EUR_5mer_counts, EAS_5mer_counts, SAS_5mer_counts, "TTAAA->T")
CI.plot(AFR_5mer_counts, EUR_5mer_counts, EAS_5mer_counts, SAS_5mer_counts, "ATAAA->T")
pairwise_scatterplot(EUR_7mer_counts, AFR_7mer_counts, "TAA->A")
source('C:/Users/VoightLab/Dropbox/SNP_rates/Code/subrate_scatterplot.R')
CI.plot(AFR_5mer_counts, EUR_5mer_counts, EAS_5mer_counts, SAS_5mer_counts, "ATAAA->T")
pairwise_scatterplot(EUR_7mer_counts, AFR_7mer_counts, "TAA->A")
source('C:/Users/VoightLab/Dropbox/SNP_rates/Code/subrate_scatterplot.R')
pairwise_scatterplot(EUR_7mer_counts, AFR_7mer_counts, "TAA->A")
source('C:/Users/VoightLab/Dropbox/SNP_rates/Code/subrate_scatterplot.R')
pairwise_scatterplot(EUR_7mer_counts, AFR_7mer_counts, "TAA->A")
source('C:/Users/VoightLab/Dropbox/SNP_rates/Code/subrate_scatterplot.R')
pairwise_scatterplot(EUR_7mer_counts, AFR_7mer_counts, "TAA->A")
pairwise_scatterplot(EUR_7mer_counts, AFR_7mer_counts, "TAA->T")
source('C:/Users/VoightLab/Dropbox/SNP_rates/Code/subrate_scatterplot.R')
pairwise_scatterplot(EUR_7mer_counts, AFR_7mer_counts, "TAA->T")
source('C:/Users/VoightLab/Dropbox/SNP_rates/Code/subrate_scatterplot.R')
pairwise_scatterplot(EUR_7mer_counts, AFR_7mer_counts, "TAA->T")
source('C:/Users/VoightLab/Dropbox/SNP_rates/Code/subrate_scatterplot.R')
pairwise_scatterplot(EUR_7mer_counts, AFR_7mer_counts, "TAA->T")
pairwise_scatterplot(EUR_5mer_counts, AFR_5mer_counts, "TAA->T")
pairwise_scatterplot(EUR_7mer_counts, AFR_7mer_counts, "TAA->T")
pairwise_scatterplot(JPT_EAS_7mer_counts, KHV_EAS_7mer_counts, "AAC->C")
source('C:/Users/VoightLab/Dropbox/SNP_rates/Code/subrate_scatterplot.R')
pairwise_scatterplot(JPT_EAS_7mer_counts, KHV_EAS_7mer_counts, "AAC->C")
pairwise_scatterplot(JPT_EAS_7mer_counts, KHV_EAS_7mer_counts, "ATA->A")
source('C:/Users/VoightLab/Dropbox/SNP_rates/Code/subrate_scatterplot.R')
pairwise_scatterplot(JPT_EAS_7mer_counts, KHV_EAS_7mer_counts, "ATA->A")
o.sig.7mer
o.p.7mer <- ordered.p(p.7mer)
o.p.7mer <- ordered.p(p.7mer)
alpha <- 0.05/length(o.p.7mer$Context)
o.sig.7mer <- subset(o.p.7mer, o.p.7mer$p < alpha)
o.sig.7mer <- o.sig.7mer[order(o.sig.7mer$p),]
o.ns.7 <- length(o.sig.7mer$Context)
o.new.7mers <- subset(o.sig.7mer, !is.element(o.sig.7mer$X3mer, c(EUR.signal, new.signal)))
o.nn.7 <- length(o.new.7mers$Context)
sum(is.element(o.sig.7mer$X3mer, c("GGA->A")))
115-21
o.sig.3mers
which(o.sig.3mers$Context = "AAC->C")
which(o.sig.3mers$Context == "AAC->C")
which(o.sig.3mers$Context == "AAC->C")
